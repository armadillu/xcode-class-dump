/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct Breakpoint;

struct BreakpointLocation;

struct Debugger;

struct Error;

struct ExecutionContextRef;

struct InputReader;

struct Module;

struct NSObject {
    Class _field1;
};

struct Process;

struct SBBreakpoint {
    struct shared_ptr<lldb_private::Breakpoint> _field1;
};

struct SBBreakpointLocation {
    struct shared_ptr<lldb_private::BreakpointLocation> _field1;
};

struct SBBroadcaster;

struct SBCommunication;

struct SBDebugger {
    struct shared_ptr<lldb_private::Debugger> m_opaque_sp;
};

struct SBError {
    struct auto_ptr<lldb_private::Error> _field1;
};

struct SBFrame {
    struct shared_ptr<lldb_private::ExecutionContextRef> m_opaque_sp;
};

struct SBInputReader {
    struct shared_ptr<lldb_private::InputReader> m_opaque_sp;
    void *m_callback_function;
    void *m_callback_baton;
};

struct SBModule {
    struct shared_ptr<lldb_private::Module> m_opaque_sp;
};

struct SBProcess {
    struct weak_ptr<lldb_private::Process> m_opaque_wp;
};

struct SBTarget {
    struct shared_ptr<lldb_private::Target> m_opaque_sp;
};

struct SBThread {
    struct shared_ptr<lldb_private::ExecutionContextRef> m_opaque_sp;
};

struct SBValue {
    struct shared_ptr<(null)<anonymous>::ValueImpl> m_opaque_sp;
};

struct SBValueList {
    struct auto_ptr<lldb_private::ValueObjectList> m_opaque_ap;
};

struct Target;

struct ValueImpl;

struct ValueObjectList;

struct _Sp_counted_base<2>;

struct __shared_count<2> {
    struct _Sp_counted_base<2> *_M_pi;
};

struct auto_ptr<lldb::SBBroadcaster> {
    struct SBBroadcaster *_M_ptr;
};

struct auto_ptr<lldb::SBCommunication> {
    struct SBCommunication *_M_ptr;
};

struct auto_ptr<lldb_private::Error> {
    struct Error *_field1;
};

struct auto_ptr<lldb_private::ValueObjectList> {
    struct ValueObjectList *_M_ptr;
};

struct shared_ptr<(null)<anonymous>::ValueImpl> {
    struct ValueImpl *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct shared_ptr<lldb_private::Breakpoint> {
    struct Breakpoint *_field1;
    struct __shared_count<2> _field2;
};

struct shared_ptr<lldb_private::BreakpointLocation> {
    struct BreakpointLocation *_field1;
    struct __shared_count<2> _field2;
};

struct shared_ptr<lldb_private::Debugger> {
    struct Debugger *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct shared_ptr<lldb_private::ExecutionContextRef> {
    struct ExecutionContextRef *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct shared_ptr<lldb_private::InputReader> {
    struct InputReader *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct shared_ptr<lldb_private::Module> {
    struct Module *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct shared_ptr<lldb_private::Target> {
    struct Target *_M_ptr;
    struct __shared_count<2> _M_refcount;
};

struct weak_ptr<lldb_private::Process> {
    struct Process *_M_ptr;
    struct __weak_count<2> {
        struct _Sp_counted_base<2> *_M_pi;
    } _M_refcount;
};

#pragma mark -

/*
 * File: /Applications/Xcode.app/Contents/PlugIns/DebuggerLLDB.ideplugin/Contents/MacOS/DebuggerLLDB
 * UUID: 94012701-4103-3F72-BEE2-813EBE009706
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 2083.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 *       Run path: @loader_path/../../../../SharedFrameworks
 *               = /Applications/Xcode.app/Contents/SharedFrameworks
 */

@protocol DBGDebugSessionBreakpointDelegate
- (BOOL)deleteWatchpoint:(id)arg1;
- (void)activationStateChanged:(BOOL)arg1 forBreakpoints:(id)arg2;
- (BOOL)deleteBreakpoint:(id)arg1;
- (BOOL)createBreakpoint:(id)arg1;
@end

@protocol DBGDebugSessionBreakpointLocationDelegate
- (void)watchpointEnablementChanged:(id)arg1;
- (void)breakpointEnablementChanged:(id)arg1;
- (void)breakpointIgnoreCount:(id)arg1;
- (void)breakpointConditionChanged:(id)arg1;
@end

@protocol DBGStackFrameDelegate <NSObject>
- (void)stackFrame:(id)arg1 requestDisassembly:(id)arg2;
@end

@protocol DVTInvalidation <NSObject>
@property(readonly) DVTStackBacktrace *invalidationBacktrace;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
@end

@protocol DVTInvalidation_New <DVTInvalidation>
@property(retain) DVTStackBacktrace *creationBacktrace;
- (void)primitiveInvalidate;
@end

@protocol IDEConsoleAdaptorDelegateProtocol

@optional
- (id)parseConsoleOutputFromOriginalOutput:(id)arg1;
- (id)parseConsoleInputFromOriginalInput:(id)arg1;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (id)debugDescription;
@end

@protocol __ARCLiteIndexedSubscripting__
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
@end

@protocol __ARCLiteKeyedSubscripting__
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
@end

// Not exported
@interface DBGLLDBCodeModule : DBGCodeModule <DVTInvalidation>
{
    struct SBModule _lldbModule;
    DVTStackBacktrace *_invalidationBacktrace;
    BOOL _isInvalidated;
}

@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (id)initWithPathString:(id)arg1 uuid:(id)arg2 lldbModule:(struct SBModule)arg3;

@end

// Not exported
@interface DBGLLDBProcess : DBGProcess <DVTInvalidation_New>
{
    struct SBProcess _lldbProcess;
    NSMutableArray *_previousDBGThreads;
    BOOL _needSharedLibraryUpdate;
    BOOL _isDoingAsyncAttach;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property BOOL isDoingAsyncAttach; // @synthesize isDoingAsyncAttach=_isDoingAsyncAttach;
@property BOOL needSharedLibraryUpdate; // @synthesize needSharedLibraryUpdate=_needSharedLibraryUpdate;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (BOOL)_isExcpetionBreakpoint:(unsigned long long)arg1;
- (void)_updateDBGThreadStateAndStopReason:(id)arg1 fromLLDBThread:(struct SBThread)arg2;
- (void)clearThreadAndStackStates;
- (id)currentThreadFromLLDB;
- (void)_readMemoryAtAddress:(unsigned long long)arg1 numberOfBytes:(unsigned long long)arg2 dataToReadInto:(id)arg3 shouldCancel:(id)arg4 resultHandler:(id)arg5;
- (id)readMemoryAtAddress:(unsigned long long)arg1 numberOfBytes:(unsigned long long)arg2 resultHandler:(id)arg3;
- (void)rawMemoryDataForAddressExpression:(id)arg1 numberOfBytes:(unsigned long long)arg2 resultHandler:(id)arg3;
- (id)updateThreadListAndGetCurrentThread:(id *)arg1;
- (struct SBThread)_currentLLDBThread;
- (void)updateSharedLibraries;
- (void)invalidatePreviousThreadsFromNewThreads:(id)arg1;
- (id)initWithDebugSession:(id)arg1 lldbProcess:(struct SBProcess)arg2;

@end

// Not exported
@interface DBGLLDBThread : DBGThread <DVTInvalidation>
{
    struct SBThread _lldbThread;
    DVTStackBacktrace *_invalidationBacktrace;
    BOOL _isInvalidated;
}

@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (void)requestUnsuspend;
- (void)requestSuspend;
- (id)currentStackFrame;
- (void)requestStackFrames:(unsigned long long)arg1 resultQueue:(struct dispatch_queue_s *)arg2 resultHandler:(id)arg3;
- (BOOL)refreshStackFrames;
- (id)_getFramesFromLLDB:(unsigned long long)arg1;
- (void)_updateStackFramesInMainThread:(id)arg1;
- (id)initWithParentProcess:(id)arg1 uniqueID:(id)arg2 lldbThread:(struct SBThread)arg3;

@end

// Not exported
@interface DBGLLDBStackFrame : DBGStackFrame <DBGStackFrameDelegate, DVTInvalidation>
{
    struct SBFrame _lldbFrame;
    struct SBValueList _lldbVariables;
    struct SBValueList _lldbRegisters;
    NSArray *_variables;
    NSArray *_locals;
    NSArray *_arguments;
    NSArray *_fileStatics;
    NSArray *_registers;
    DVTStackBacktrace *_invalidationBacktrace;
    BOOL _isInvalidated;
    DVTDispatchLock *_invalidationLock;
}

@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property(copy, nonatomic) NSArray *fileStatics; // @synthesize fileStatics=_fileStatics;
@property(copy, nonatomic) NSArray *registers; // @synthesize registers=_registers;
@property(copy, nonatomic) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy, nonatomic) NSArray *locals; // @synthesize locals=_locals;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (void)stackFrame:(id)arg1 requestDisassembly:(id)arg2;
- (id)lldbSession;
- (id)disassemble;
- (void)_getRegistersFromLLDBOnSessionThread;
- (void)_getFileStaticsFromLLDBOnSessionThread;
- (void)_getLocalsFromLLDBOnSessionThread;
- (void)_getArgumentsFromLLDBOnSessionThread;
- (id)_evaluateExpressionOnSessionThread:(id)arg1;
- (void)_getDataValueForExpressionOnSessionThread:(id)arg1 onQueue:(struct dispatch_queue_s *)arg2 withResultBlock:(id)arg3;
- (void)requestDataValueForExpression:(id)arg1 atBlockStartAddress:(id)arg2 onQueue:(struct dispatch_queue_s *)arg3 withResultBlock:(id)arg4;
- (void)requestDataValueForSymbol:(id)arg1 symbolKind:(id)arg2 atLocation:(id)arg3 onQueue:(struct dispatch_queue_s *)arg4 withResultBlock:(id)arg5;
- (id)_findSymbolWithName:(id)arg1 symbolKind:(id)arg2 atLocation:(id)arg3;
- (void)getFrameVariables;
@property(readonly) BOOL isSessionThread;
- (void)_setReturnValueFromInitIfNecessary;
- (id)initWithParentThread:(id)arg1 frameNumber:(id)arg2 framePointer:(id)arg3 name:(id)arg4 lldbFrame:(struct SBFrame)arg5;

@end

// Not exported
@interface DBGLLDBDataValue : DBGDataValue <DVTInvalidation>
{
    DBGLLDBDataValue *_parent;
    DBGLLDBDataType *_dbgStaticType;
    struct SBValue _lldbValueObject;
    NSMutableArray *_childValues;
    BOOL _childValuesCountValid;
    unsigned long long _numChildren;
    NSString *_name_str;
    NSString *_value_str;
    NSString *_summary_str;
    NSString *_expr_path_str;
    BOOL _value_has_changed;
    BOOL _in_scope;
    BOOL _hasChildValues;
    BOOL _requested_children;
    BOOL _requestedSummary;
    BOOL _treatSummaryAsValue;
    DVTStackBacktrace *_invalidationBacktrace;
    BOOL _isInvalidated;
}

+ (id)dataValueFormatForLLDBFormat:(int)arg1;
+ (int)dynamicValueType;
+ (void)initialize;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
- (id)parent;
@property BOOL treatSummaryAsValue; // @synthesize treatSummaryAsValue=_treatSummaryAsValue;
- (id)staticType;
@property BOOL childValuesCountValid; // @synthesize childValuesCountValid=_childValuesCountValid;
@property(nonatomic) NSArray *childValues; // @synthesize childValues=_childValues;
- (BOOL)hasChildValues;
- (BOOL)inScope;
@property(copy, nonatomic) NSString *summary; // @synthesize summary=_summary_str;
- (BOOL)valueHasChanged;
- (id).cxx_construct;
- (void).cxx_destruct;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (void)_updateValueFormatsForStackFrame:(id)arg1;
- (void)_persistValueFormat:(id)arg1 stackFrame:(id)arg2;
- (id)_contextNameForFormatsWithStackFrame:(id)arg1;
- (id)_contextNameForStackFrame:(id)arg1;
- (void)watch;
- (id)realName;
- (BOOL)wantsToProvideSummary;
- (id)_createNSStringForCString:(const char *)arg1;
- (id)description;
- (id)_lldbValueObjectDescription;
- (id)_lldbValueDescription;
- (id)lldbDescription;
- (void)setFormat:(id)arg1;
- (void)_primitiveSetFormat:(id)arg1;
- (id)format;
- (const char *)valueAsCString;
- (void)_childValueDidFault:(id)arg1 childIndex:(unsigned long long)arg2;
- (void)_fetchChildValuesFromLLDBOnSessionThreadIfNecessary;
- (void)_setChildValuesToArrayOfPlaceholdersIfNecessary;
- (void)_fetchSummaryFromLLDBOnSessionThreadIfNecessary;
- (id)value;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name_str;
- (BOOL)dynamicTypeHasChanged;
- (BOOL)summaryHasChanged;
- (void)setValue:(id)arg1;
- (id)blockStartAddress;
- (id)expressionPath;
@property(readonly) BOOL shouldUsePlaceholderChildDataValues;
@property(readonly) BOOL isSessionThread;
@property(readonly) DBGLLDBStackFrame *lldbStackFrame;
- (id)initWithLLDBValueObject:(struct SBValue)arg1 forStackFrame:(id)arg2 withParent:(id)arg3;

@end

// Not exported
@interface DBGLLDBChildPlaceholderDataValue : DBGLLDBDataValue
{
    DBGLLDBDataValue *_parentDataValue;
    unsigned long long _childIndex;
    BOOL _hasFaulted;
}

- (id)value;
- (id)_initWithParentDataValue:(id)arg1 childIndex:(unsigned long long)arg2;

@end

// Not exported
@interface DBGLLDBLauncher : IDERunOperationPathWorker <IDEConsoleAdaptorDelegateProtocol>
{
    struct SBDebugger m_debugger;
    NSFileHandle *_consoleAdaptorDebuggerInputFile;
    IDEConsoleAdaptor *_consoleAdaptorDebugger;
    IDEConsoleAdaptor *_consoleAdaptorTarget;
    DBGLLDBSession *_debugSession;
    struct auto_ptr<lldb::SBCommunication> m_lldb_comm_ap;
    BOOL _terminateCalled;
    struct SBInputReader m_console_reader;
    NSString *m_prompt;
    struct dispatch_queue_s *_executeLLDBCommandQueue;
    DVTDispatchLock *_lifeCycleLock;
}

+ (void)initialize;
@property(readonly) BOOL terminateCalled; // @synthesize terminateCalled=_terminateCalled;
@property(readonly) IDEConsoleAdaptor *consoleAdaptorTarget; // @synthesize consoleAdaptorTarget=_consoleAdaptorTarget;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)terminate;
- (void)start;
- (struct SBProcess)_doRegularDebugWithTarget:(struct SBTarget)arg1 usingDebugServer:(BOOL)arg2 errTargetString:(id)arg3;
- (void)_reportTarget:(id)arg1 failedToLaunchError:(struct SBError)arg2;
- (struct SBProcess)_doAttachWithTarget:(struct SBTarget)arg1 childPID:(unsigned long long *)arg2;
- (id)executableArguments;
- (id)parseConsoleOutputFromOriginalOutput:(id)arg1;
- (id)parseConsoleInputFromOriginalInput:(id)arg1;
- (void)sendSTDIN:(id)arg1;
- (void)_executeLLDBCommands:(id)arg1;
- (BOOL)consoleInputReaderIsActive;
- (void)resetPrompt:(const char *)arg1;
- (void)clearPrompt;
- (void)refreshPrompt;
- (void)_createDebuggerConsoleAdaptor;
- (void)setFinishedRunning;
- (void)_cleanUp;
- (void)_logToConsoleForUserActions:(id)arg1;
- (id)initWithExtensionIdentifier:(id)arg1 launchSession:(id)arg2;

@end

// Not exported
@interface DBGLLDBSession : DBGDebugSession <DVTInvalidation_New, IDEConsoleAdaptorDelegateProtocol, DBGDebugSessionBreakpointDelegate, DBGDebugSessionBreakpointLocationDelegate>
{
    struct SBTarget _lldbTarget;
    struct auto_ptr<lldb::SBBroadcaster> _broadcasterAP;
    BOOL _isTracingOnDeviceAndTargetGotJetsam;
    NSMutableArray *_resumeActions;
    NSMutableArray *_threadActions;
    DVTDispatchLock *_actionsLock;
    struct _opaque_pthread_t {
        long long _field1;
        struct __darwin_pthread_handler_rec *_field2;
        char _field3[1168];
    } *_sessionThread;
    BOOL _isLongRunningConsoleCommand;
    struct dispatch_queue_s *_isLongRunningConsoleCommandQueue;
    BOOL _isInvalidated;
    BOOL _isInvalidating;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTStackBacktrace *_creationBacktrace;
}

+ (BOOL)automaticallyNotifiesObserversOfValue;
+ (void)initialize;
@property(retain) DVTStackBacktrace *creationBacktrace; // @synthesize creationBacktrace=_creationBacktrace;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property BOOL isTracingOnDeviceAndTargetGotJetsam; // @synthesize isTracingOnDeviceAndTargetGotJetsam=_isTracingOnDeviceAndTargetGotJetsam;
- (id).cxx_construct;
- (void).cxx_destruct;
- (void)primitiveInvalidate;
- (void)invalidate;
- (void)_invalidate;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (id)logSuffix;
- (id)dbgLLDBProcess;
- (BOOL)supportsSteppingIntoCallSymbol;
- (BOOL)supportsWatchpoints;
- (void)terminateCurrentDebuggerCommandIfNeeded;
- (id)supportedDataValueFormatsForDataValue:(id)arg1;
- (BOOL)consoleShouldTrackInputHistory;
- (void)loadDebugSymbolsForSharedLibrary:(id)arg1;
- (void)breakpointEnablementChanged:(id)arg1;
- (void)breakpointIgnoreCount:(id)arg1;
- (void)breakpointConditionChanged:(id)arg1;
- (void)watchpointEnablementChanged:(id)arg1;
- (void)activationStateChanged:(BOOL)arg1 forBreakpoints:(id)arg2;
- (BOOL)deleteBreakpoint:(id)arg1;
- (void)_handleBreakpointLocationRemovedEventFromLLDB:(struct SBBreakpointLocation)arg1;
- (void)_handleBreakpointLocationAddedEventFromLLDB:(struct SBBreakpointLocation)arg1;
- (void)_handleBreakpointRemovedEventFromLLDB:(struct SBBreakpoint)arg1;
- (void)_handleBreakpointAddedEventFromLLDB:(struct SBBreakpoint)arg1;
- (BOOL)deleteWatchpoint:(id)arg1;
- (struct SBBreakpoint)_createBreakpointFromAddressBreakpoint:(id)arg1;
- (struct SBBreakpoint)_createBreakpointFromExceptionBreakpoint:(id)arg1;
- (struct SBBreakpoint)_createBreakpointFromSymbolicBreakpoint:(id)arg1;
- (struct SBBreakpoint)_createBreakpointFromFileBreakpoint:(id)arg1;
- (BOOL)createBreakpoint:(id)arg1;
- (id)commandsExpectingExpressions;
- (void)_delayedSetThreadsNil;
- (BOOL)handleNextActionWithState:(int *)arg1 withRunPending:(char *)arg2;
- (void)addSessionThreadAction:(id)arg1;
- (void)completeString:(id)arg1 resultHandler:(id)arg2;
- (void)printDescriptionOfDataValueToConsole:(id)arg1 runAllThreads:(BOOL)arg2;
- (id)requestDataContainerForSymbol:(id)arg1 atLocation:(id)arg2;
- (void)_performBreakpointActions:(id)arg1 frame:(struct SBFrame)arg2;
- (void)_removeBreakpointHitCallback:(unsigned long long)arg1;
- (void)_addBreakpointHitCallback:(struct SBBreakpoint)arg1;
- (void)requestMovePCInStackFrame:(id)arg1 toLineNumber:(unsigned long long)arg2;
- (BOOL)supportsPCAnnotationDragging;
- (BOOL)supportsMultiplePCAnnotation;
- (void)_threadOrFrameChanged;
- (void)executeDebuggerCommand:(id)arg1 threadID:(unsigned long long)arg2 frameID:(unsigned long long)arg3;
- (void)requestContinueToLocation:(id)arg1 inContext:(struct NSObject *)arg2;
- (void)requestStepIntoCallSymbol:(id)arg1 atLocation:(id)arg2 inContext:(struct NSObject *)arg3;
- (void)requestStepOverSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStop:(struct NSObject *)arg1;
- (void)requestContinue:(struct NSObject *)arg1;
- (void)requestPause:(struct NSObject *)arg1;
- (void)requestStepOut:(struct NSObject *)arg1;
- (void)requestStepOverInstruction:(struct NSObject *)arg1;
- (void)requestStepOverLine:(struct NSObject *)arg1;
- (void)requestStepIntoInstruction:(struct NSObject *)arg1;
- (void)requestStepInSuspendOtherThreads:(struct NSObject *)arg1;
- (void)requestStepIn:(struct NSObject *)arg1;
- (void)_appendProcessControlAction:(int)arg1 scope:(int)arg2 arg:(unsigned long long)arg3 location:(id)arg4;
- (void)_appendProcessControlAction:(int)arg1 scope:(int)arg2 arg:(unsigned long long)arg3;
- (BOOL)currentThreadIsSessionThread;
- (void)trackProcess;
- (void)_setLoggingCallback;
- (void)setTarget:(struct SBTarget)arg1;
@property(readonly) DBGLLDBLauncher *launcher;
- (id)navigableItem_name;
- (void)cleanUp;
- (id)initWithDebugLauncher:(id)arg1;

@end

// Not exported
@interface DBGLLDBDataType : DBGDataType
{
    void *_lldbType;
}

- (BOOL)isUnknownType;
- (BOOL)isPointer;
- (id)initWithTypename:(id)arg1 withType:(void *)arg2;

@end

// Not exported
@interface DBGLLDBProcessControl : NSObject
{
    int _action;
    int _scope;
    DBGLLDBThread *_thread;
    unsigned long long _arg0;
    DVTTextDocumentLocation *_location;
}

@property(readonly) DVTTextDocumentLocation *location; // @synthesize location=_location;
@property(readonly) unsigned long long argument; // @synthesize argument=_arg0;
@property(readonly) DBGLLDBThread *thread; // @synthesize thread=_thread;
@property(readonly) int scope; // @synthesize scope=_scope;
@property(readonly) int action; // @synthesize action=_action;
- (id)initWithAction:(int)arg1 scope:(int)arg2 thread:(id)arg3 arg:(unsigned long long)arg4 location:(id)arg5;
- (id)initWithAction:(int)arg1 scope:(int)arg2 thread:(id)arg3 arg:(unsigned long long)arg4;

@end

// Not exported
@interface DBGLLDBMemoryManager : NSObject
{
    id _workspaceClosedNotificationObserver;
    struct dispatch_source_s *_cache_event_source;
}

+ (void)stop;
+ (void)start;
- (void)_invalidate;
- (id)_initInternal;
- (id)init;

@end

// Not exported
@interface _DBGDebuggerLLDBBundlePrivateClassForFindingBundle : NSObject
{
}

@end

