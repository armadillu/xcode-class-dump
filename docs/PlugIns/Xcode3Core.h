/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark -

/*
 * File: /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/MacOS/Xcode3Core
 * UUID: C1151F2D-9AB9-3009-9608-7CCEC81772D8
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 2108.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 *       Run path: @loader_path/../Frameworks
 *               = /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/Frameworks
 *       Run path: @loader_path/../../../
 *               = /Applications/Xcode.app/Contents/PlugIns
 *       Run path: @executable_path/../Frameworks
 *               = /Applications/Xcode.app/Contents/PlugIns/Xcode3Core.ideplugin/Contents/Frameworks
 */

@protocol IDEContainerDelegate <NSObject>

@optional
- (void)_container:(id)arg1 didChangeFromFilePath:(id)arg2 toFilePath:(id)arg3;
@end

@protocol IDEInitialization
+ (BOOL)ide_initializeWithOptions:(int)arg1 error:(id *)arg2;
@end

@protocol IDESourceTreeProvider <NSObject>
+ (id)stringByExpandingSourceTreeReferencesInString:(id)arg1;
@end

@protocol IDEWorkspaceDelegate <IDEContainerDelegate>
- (void)_workspace:(id)arg1 failedToResolveContainerForProjectFile:(id)arg2;

@optional
- (void)_workspace:(id)arg1 didChangeSimpleFilesFocusedTo:(BOOL)arg2;
- (void)_workspace:(id)arg1 didChangeFinishedLoadingTo:(BOOL)arg2;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;

@optional
- (id)debugDescription;
@end

@protocol Xcode3ProjectCreationErrorHandling <NSObject>
- (id)errorMessage;
- (BOOL)didEncounterFatalError;

@optional
- (BOOL)shouldOpenProjectReadOnlyAtPath:(id)arg1;
- (void)unableToOpenProjectAtPath:(id)arg1 reason:(id)arg2;
- (BOOL)shouldOpenProjectOfMismatchingVersion:(unsigned long long)arg1 atPath:(id)arg2;
@end

@protocol __ARCLiteIndexedSubscripting__
- (void)setObject:(id)arg1 atIndexedSubscript:(unsigned long long)arg2;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
@end

@protocol __ARCLiteKeyedSubscripting__
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (id)objectForKeyedSubscript:(id)arg1;
@end

@interface Xcode3Core : NSObject
{
}

@end

@interface Xcode3CoreInitializer : NSObject <IDEInitialization>
{
}

+ (BOOL)ide_initializeWithOptions:(int)arg1 error:(id *)arg2;

@end

@interface Xcode3BuildSettingsDictionary : NSObject
{
}

+ (id)dictionaryByParsingXcconfigFileAtPath:(id)arg1 baseDirectoryPath:(id)arg2 error:(id *)arg3;

@end

@interface Xcode3SourceTrees : NSObject <IDESourceTreeProvider>
{
}

+ (id)stringByExpandingSourceTreeReferencesInString:(id)arg1;

@end

@interface Xcode3CommandLineBuildLog : IDEActivityLogSection
{
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    NSMutableArray *_failedSections;
}

+ (Class)logRecorderClass;
@property(retain) NSMutableArray *failedSections; // @synthesize failedSections=_failedSections;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
- (void)addFailedSection:(id)arg1;
- (id)initLogWithTitle:(id)arg1 standardOutput:(id)arg2 standardError:(id)arg3;
- (id)initLogWithTitle:(id)arg1;

@end

@interface Xcode3CommandLineBuildLogRecorder : IDEActivityLogSectionRecorder
{
    NSMutableArray *activeSections;
    DVTMapTable *emittedSubsectionsBySection;
}

@property(retain) DVTMapTable *emittedSubsectionsBySection; // @synthesize emittedSubsectionsBySection;
@property(retain) NSMutableArray *activeSections; // @synthesize activeSections;
- (void)noteDescendantLogSectionDidClose:(id)arg1 inSupersection:(id)arg2;
- (BOOL)_findNewEffectiveSectionFromSubsectionsOfSection:(id)arg1;
- (BOOL)_findNewEffectiveSectionFromSubsectionsOfSection:(id)arg1 startingAtIndex:(unsigned long long)arg2;
- (void)noteDescendantLogSection:(id)arg1 didAppendText:(id)arg2;
- (void)noteDescendantLogSection:(id)arg1 didAddSubsection:(id)arg2;
- (void)_noteLogSection:(id)arg1 didAddSubsection:(id)arg2;
- (void)_emitSection:(id)arg1;
- (void)_finishEmittingClosedSection:(id)arg1;
- (void)_emitString:(id)arg1 withNewlineIfNeeded:(BOOL)arg2;
@property(readonly) IDEActivityLogSection *effectiveSection;
- (id)section;
- (id)initWithLogSection:(id)arg1;

@end

@interface _Xcode3CommandLineProjectCreationErrorHandler : NSObject <Xcode3ProjectCreationErrorHandling>
{
    BOOL _didEncounterFatalError;
    NSString *_errorMessage;
}

@property(copy) NSString *errorMessage; // @synthesize errorMessage=_errorMessage;
@property BOOL didEncounterFatalError; // @synthesize didEncounterFatalError=_didEncounterFatalError;
- (BOOL)shouldOpenProjectReadOnlyAtPath:(id)arg1;
- (void)unableToOpenProjectAtPath:(id)arg1 reason:(id)arg2;
- (BOOL)shouldOpenProjectOfMismatchingVersion:(unsigned long long)arg1 atPath:(id)arg2;

@end

@interface Xcode3CommandLineBuildTool : NSObject <IDEWorkspaceDelegate>
{
    NSString *_name;
    NSArray *_arguments;
    NSDictionary *_environment;
    NSFileHandle *_standardInput;
    NSFileHandle *_standardOutput;
    NSFileHandle *_standardError;
    int _toolCommand;
    BOOL _shouldExit;
    long long _exitStatus;
    NSString *_projectName;
    NSMutableArray *_targetNames;
    NSString *_workspaceName;
    NSString *_schemeName;
    NSString *_xcconfigPathFromOption;
    NSString *_xcconfigPathFromEnvVar;
    NSString *_nameOfFileToFind;
    NSMutableArray *_buildActions;
    Xcode3Project *_project;
    NSMutableArray *_targets;
    BOOL _allTargets;
    IDEWorkspace *_workspace;
    IDEScheme *_scheme;
    NSString *_configurationName;
    NSMutableArray *_architectures;
    NSString *_activeArchitecture;
    NSString *_baseSdkName;
    BOOL _parallelizeTargets;
    NSNumber *_maxConcurrency;
    BOOL _dontActuallyRunCommands;
    NSMutableDictionary *_synthesizedProperties;
    NSMutableDictionary *_propertiesFromCommandLine;
    NSDictionary *_propertiesFromXcconfigOption;
    NSDictionary *_propertiesFromXcconfigEnvVar;
    NSMutableDictionary *_userDefaults;
    NSOperationQueue *_buildToolQueue;
    id _containerDidOpenContainerNotificationObserver;
    NSMutableArray *_toolchainNames;
}

+ (id)sharedCommandLineBuildTool;
+ (id)workspaceFilesInDirectory:(id)arg1;
+ (id)knownWorkspaceWrapperExtensions;
+ (id)timingLogAspect;
@property(retain) NSMutableArray *toolchainNames; // @synthesize toolchainNames=_toolchainNames;
@property BOOL dontActuallyRunCommands; // @synthesize dontActuallyRunCommands=_dontActuallyRunCommands;
@property(retain) NSOperationQueue *buildToolQueue; // @synthesize buildToolQueue=_buildToolQueue;
@property(retain) NSMutableDictionary *userDefaults; // @synthesize userDefaults=_userDefaults;
@property(retain) NSDictionary *propertiesFromXcconfigEnvVar; // @synthesize propertiesFromXcconfigEnvVar=_propertiesFromXcconfigEnvVar;
@property(retain) NSDictionary *propertiesFromXcconfigOption; // @synthesize propertiesFromXcconfigOption=_propertiesFromXcconfigOption;
@property(retain) NSMutableDictionary *propertiesFromCommandLine; // @synthesize propertiesFromCommandLine=_propertiesFromCommandLine;
@property(retain) NSMutableDictionary *synthesizedProperties; // @synthesize synthesizedProperties=_synthesizedProperties;
@property(copy) NSNumber *maxConcurrency; // @synthesize maxConcurrency=_maxConcurrency;
@property BOOL parallelizeTargets; // @synthesize parallelizeTargets=_parallelizeTargets;
@property(copy) NSString *baseSdkName; // @synthesize baseSdkName=_baseSdkName;
@property(copy) NSString *activeArchitecture; // @synthesize activeArchitecture=_activeArchitecture;
@property(retain) NSMutableArray *architectures; // @synthesize architectures=_architectures;
@property(copy) NSString *configurationName; // @synthesize configurationName=_configurationName;
@property(retain) IDEScheme *scheme; // @synthesize scheme=_scheme;
@property(retain) IDEWorkspace *workspace; // @synthesize workspace=_workspace;
@property BOOL allTargets; // @synthesize allTargets=_allTargets;
@property(retain) NSMutableArray *targets; // @synthesize targets=_targets;
@property(retain) Xcode3Project *project; // @synthesize project=_project;
@property(retain) NSMutableArray *buildActions; // @synthesize buildActions=_buildActions;
@property(copy) NSString *nameOfFileToFind; // @synthesize nameOfFileToFind=_nameOfFileToFind;
@property(copy) NSString *xcconfigPathFromEnvVar; // @synthesize xcconfigPathFromEnvVar=_xcconfigPathFromEnvVar;
@property(copy) NSString *xcconfigPathFromOption; // @synthesize xcconfigPathFromOption=_xcconfigPathFromOption;
@property(copy) NSString *schemeName; // @synthesize schemeName=_schemeName;
@property(copy) NSString *workspaceName; // @synthesize workspaceName=_workspaceName;
@property(retain) NSMutableArray *targetNames; // @synthesize targetNames=_targetNames;
@property(copy) NSString *projectName; // @synthesize projectName=_projectName;
@property(retain) NSFileHandle *standardError; // @synthesize standardError=_standardError;
@property(retain) NSFileHandle *standardOutput; // @synthesize standardOutput=_standardOutput;
@property(retain) NSFileHandle *standardInput; // @synthesize standardInput=_standardInput;
@property(copy) NSDictionary *environment; // @synthesize environment=_environment;
@property(copy) NSArray *arguments; // @synthesize arguments=_arguments;
@property(copy) NSString *name; // @synthesize name=_name;
@property long long exitStatus; // @synthesize exitStatus=_exitStatus;
@property(nonatomic) BOOL shouldExit; // @synthesize shouldExit=_shouldExit;
@property int toolCommand; // @synthesize toolCommand=_toolCommand;
- (void)run;
- (void)_printVerboseSDKListAndExit;
- (void)_printVerboseInfoForSDK:(id)arg1 keysToEmit:(id)arg2;
- (void)_printShortSDKListAndExit;
- (void)_enumerateAllPlatformsAlphabeticallyWithBlock:(id)arg1;
- (void)_printPathToLibraryAndExit;
- (void)_printPathToExecutableAndExit;
- (void)_printContainerInformationAndExit;
- (void)_printVersionInfoAndExit;
- (void)_showBuildSettings;
- (void)_build;
- (void)unableToOpenProjectAtPath:(id)arg1 reason:(id)arg2;
- (void)_workspace:(id)arg1 failedToResolveContainerForProjectFile:(id)arg2;
- (void)_resolveInputOptions;
- (void)_resolveBaseSdk;
- (void)_parseOptions;
- (void)_printErrorString:(id)arg1 andFailWithCode:(long long)arg2;
- (void)_printWarningString:(id)arg1;
- (unsigned long long)_projectLoadingTimeout;
- (unsigned long long)_schemeLoadingTimeout;
- (id)overridingProperties;
- (id)init;

@end

@interface CommandLineLicenseHelper : NSObject
{
    NSString *_licensePath;
    NSBundle *_xcodeBundle;
    DVTLicenseAgreementHelper *_licenseAgreementHelper;
}

+ (unsigned long long)showCommandLineLicenseUIIfNeeded:(BOOL)arg1;
- (unsigned long long)showLicenseUIIfNeeded:(BOOL)arg1;
- (BOOL)userHasWriteableHomeDirectory;
- (BOOL)isTTY;
- (unsigned long long)promptForAgreement;
- (void)printLicense;
- (id)launchTaskAndReturnOutputForTaskPath:(id)arg1 taskArguments:(id)arg2;
- (BOOL)displayLicenseHasAgreed:(BOOL)arg1;
- (const char *)getLicensePath;
- (id)initWithXcodeBundle:(id)arg1;

@end

