/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct GPUVertexAttribute;

struct GPUVertexAttributeComponent {
    int miDataOffset;
    int miSubComponentOffset;
    int miBufLen;
    int miStride;
    int meFormat;
    struct objc_wrapper<NSData *__strong> mData;
    struct fixed_string<GPUTools::char_traits<64>> msName;
};

struct GPUVertexAttributes {
    struct vector<GPUVertexAttribute *, std::__1::allocator<GPUVertexAttribute *>> mAttributes;
    struct GPUVertexAttributeComponent *mElementAttribute;
    _Bool mbIndexed;
    int miNumVerts;
    int miNumElts;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct fixed_string<GPUTools::char_traits<64>> {
    char _buffer[65];
    unsigned long long _iLen;
};

struct objc_wrapper<NSData *__strong> {
    NSData *m_object;
};

struct vector<GPUVertexAttribute *, std::__1::allocator<GPUVertexAttribute *>> {
    struct GPUVertexAttribute **__begin_;
    struct GPUVertexAttribute **__end_;
    struct __compressed_pair<GPUVertexAttribute **, std::__1::allocator<GPUVertexAttribute *>> {
        struct GPUVertexAttribute **__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    float _field1;
    float _field2;
} CDStruct_b2fbf00d;

#pragma mark -

/*
 * File: /Applications/Xcode.app/Contents/PlugIns/GPURenderTargetEditor.ideplugin/Contents/MacOS/GPURenderTargetEditor
 * UUID: 108B54D5-F53B-3593-9BCB-A30F60884087
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 1.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 */

@protocol GPUDataTableViewDataProvider <NSObject>
- (id)dataTableView:(id)arg1 textForCellAtRow:(long long)arg2 column:(long long)arg3 inColumnGroup:(long long)arg4;
- (long long)dataTableView:(id)arg1 numberOfColumnsInGroup:(long long)arg2;
- (long long)numberOfColumnGroupsInTableView:(id)arg1;
- (long long)numberOfRowsInDataTableView:(id)arg1;

@optional
- (id)dataTableView:(id)arg1 titleForColumnGroup:(long long)arg2;
- (id)dataTableView:(id)arg1 titleForColumn:(long long)arg2 inGroup:(long long)arg3;
@end

@protocol GPUDataTableViewDelegate <NSObject>

@optional
- (double)dataTableView:(id)arg1 minimumWidthForColumn:(long long)arg2 inGroup:(long long)arg3;
- (void)dataTableViewWillShowContextMenu:(id)arg1;
- (id)dataTableView:(id)arg1 colorForCellAtRow:(long long)arg2 column:(long long)arg3 inGroup:(long long)arg4;
@end

@protocol GPURenderBufferViewStateCoordinationProtocol
- (void)renderBufferViewDidChangeState:(id)arg1;
@end

@protocol GPUTraceBubbleOwner <NSObject>
- (void)settingsUpdateToneMapRange;
- (void)settingsToggleAlphaEnable;
- (void)settingsToggleBlueEnable;
- (void)settingsToggleGreenEnable;
- (void)settingsToggleRedEnable;
- (void)settingsBubbleClosed;
- (void)infoBubbleClosed;
@end

@protocol GPUTraceResourceInfoDelegateProtocol
- (int)openGLAPI;
- (id)currentStateMirror;
@end

@protocol IDEDebuggingAddtionUIControllerLifeCycleObserver <NSObject>
- (void)debuggingAddtionUIControllerInvalidated:(id)arg1;
- (void)debuggingAddtionUIControllerUpdated:(id)arg1;
- (Class)classOfDebuggingAddtionUIControllerInterestedIn;
@end

@protocol IDEDocumentStructureProviding <NSObject>
@property(readonly) NSArray *ideTopLevelStructureObjects;
@end

@protocol IDEGPUAssistantEditorAdditions <NSObject>
- (void)_takeStateDictionaryFromPreviousGPUAssistantEditor:(id)arg1;

@optional
- (BOOL)_shouldInstallGPUEditorWithPreviousStateDictionaryOrNil:(id)arg1;
@end

@protocol NSCollectionViewDelegate <NSObject>

@optional
- (void)collectionView:(id)arg1 updateDraggingItemsForDrag:(id)arg2;
- (void)collectionView:(id)arg1 draggingSession:(id)arg2 endedAtPoint:(struct CGPoint)arg3 dragOperation:(unsigned long long)arg4;
- (void)collectionView:(id)arg1 draggingSession:(id)arg2 willBeginAtPoint:(struct CGPoint)arg3 forItemsAtIndexes:(id)arg4;
- (id)collectionView:(id)arg1 pasteboardWriterForItemAtIndex:(unsigned long long)arg2;
- (BOOL)collectionView:(id)arg1 acceptDrop:(id)arg2 index:(long long)arg3 dropOperation:(long long)arg4;
- (unsigned long long)collectionView:(id)arg1 validateDrop:(id)arg2 proposedIndex:(long long *)arg3 dropOperation:(long long *)arg4;
- (id)collectionView:(id)arg1 draggingImageForItemsAtIndexes:(id)arg2 withEvent:(id)arg3 offset:(struct CGPoint *)arg4;
- (id)collectionView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedItemsAtIndexes:(id)arg3;
- (BOOL)collectionView:(id)arg1 writeItemsAtIndexes:(id)arg2 toPasteboard:(id)arg3;
- (BOOL)collectionView:(id)arg1 canDragItemsAtIndexes:(id)arg2 withEvent:(id)arg3;
@end

@protocol NSControlTextEditingDelegate <NSObject>

@optional
- (id)control:(id)arg1 textView:(id)arg2 completions:(id)arg3 forPartialWordRange:(struct _NSRange)arg4 indexOfSelectedItem:(long long *)arg5;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (BOOL)control:(id)arg1 isValidObject:(id)arg2;
- (void)control:(id)arg1 didFailToValidatePartialString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 didFailToFormatString:(id)arg2 errorDescription:(id)arg3;
- (BOOL)control:(id)arg1 textShouldEndEditing:(id)arg2;
- (BOOL)control:(id)arg1 textShouldBeginEditing:(id)arg2;
@end

@protocol NSObject
- (id)description;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (struct _NSZone *)zone;
- (id)self;
- (Class)class;
- (Class)superclass;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
@end

@protocol NSTableViewDataSource <NSObject>

@optional
- (id)tableView:(id)arg1 namesOfPromisedFilesDroppedAtDestination:(id)arg2 forDraggedRowsWithIndexes:(id)arg3;
- (BOOL)tableView:(id)arg1 acceptDrop:(id)arg2 row:(long long)arg3 dropOperation:(unsigned long long)arg4;
- (unsigned long long)tableView:(id)arg1 validateDrop:(id)arg2 proposedRow:(long long)arg3 proposedDropOperation:(unsigned long long)arg4;
- (BOOL)tableView:(id)arg1 writeRowsWithIndexes:(id)arg2 toPasteboard:(id)arg3;
- (void)tableView:(id)arg1 updateDraggingItemsForDrag:(id)arg2;
- (void)tableView:(id)arg1 draggingSession:(id)arg2 endedAtPoint:(struct CGPoint)arg3 operation:(unsigned long long)arg4;
- (void)tableView:(id)arg1 draggingSession:(id)arg2 willBeginAtPoint:(struct CGPoint)arg3 forRowIndexes:(id)arg4;
- (id)tableView:(id)arg1 pasteboardWriterForRow:(long long)arg2;
- (void)tableView:(id)arg1 sortDescriptorsDidChange:(id)arg2;
- (void)tableView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
@end

@protocol NSTableViewDelegate <NSControlTextEditingDelegate>

@optional
- (void)tableViewSelectionIsChanging:(id)arg1;
- (void)tableViewColumnDidResize:(id)arg1;
- (void)tableViewColumnDidMove:(id)arg1;
- (void)tableViewSelectionDidChange:(id)arg1;
- (BOOL)tableView:(id)arg1 shouldReorderColumn:(long long)arg2 toColumn:(long long)arg3;
- (double)tableView:(id)arg1 sizeToFitWidthOfColumn:(long long)arg2;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (BOOL)tableView:(id)arg1 shouldTypeSelectForEvent:(id)arg2 withCurrentSearchString:(id)arg3;
- (long long)tableView:(id)arg1 nextTypeSelectMatchFromRow:(long long)arg2 toRow:(long long)arg3 forString:(id)arg4;
- (id)tableView:(id)arg1 typeSelectStringForTableColumn:(id)arg2 row:(long long)arg3;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (void)tableView:(id)arg1 didDragTableColumn:(id)arg2;
- (void)tableView:(id)arg1 didClickTableColumn:(id)arg2;
- (void)tableView:(id)arg1 mouseDownInHeaderOfTableColumn:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectTableColumn:(id)arg2;
- (id)tableView:(id)arg1 selectionIndexesForProposedSelection:(id)arg2;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)selectionShouldChangeInTableView:(id)arg1;
- (id)tableView:(id)arg1 dataCellForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 shouldTrackCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (BOOL)tableView:(id)arg1 shouldShowCellExpansionForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (BOOL)tableView:(id)arg1 shouldEditTableColumn:(id)arg2 row:(long long)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)tableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)tableView:(id)arg1 rowViewForRow:(long long)arg2;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
@end

@protocol NSTextFieldDelegate <NSControlTextEditingDelegate>
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (void)windowDidExitVersionBrowser:(id)arg1;
- (void)windowWillExitVersionBrowser:(id)arg1;
- (void)windowDidEnterVersionBrowser:(id)arg1;
- (void)windowWillEnterVersionBrowser:(id)arg1;
- (void)windowDidExitFullScreen:(id)arg1;
- (void)windowWillExitFullScreen:(id)arg1;
- (void)windowDidEnterFullScreen:(id)arg1;
- (void)windowWillEnterFullScreen:(id)arg1;
- (void)windowDidEndLiveResize:(id)arg1;
- (void)windowWillStartLiveResize:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowWillBeginSheet:(id)arg1;
- (void)windowDidChangeScreenProfile:(id)arg1;
- (void)windowDidChangeScreen:(id)arg1;
- (void)windowDidUpdate:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowWillMiniaturize:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)windowDidResignMain:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowWillMove:(id)arg1;
- (void)windowDidExpose:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (void)window:(id)arg1 didDecodeRestorableState:(id)arg2;
- (void)window:(id)arg1 willEncodeRestorableState:(id)arg2;
- (struct CGSize)window:(id)arg1 willResizeForVersionBrowserWithMaxPreferredSize:(struct CGSize)arg2 maxAllowedSize:(struct CGSize)arg3;
- (void)windowDidFailToExitFullScreen:(id)arg1;
- (void)window:(id)arg1 startCustomAnimationToExitFullScreenWithDuration:(double)arg2;
- (id)customWindowsToExitFullScreenForWindow:(id)arg1;
- (void)windowDidFailToEnterFullScreen:(id)arg1;
- (void)window:(id)arg1 startCustomAnimationToEnterFullScreenWithDuration:(double)arg2;
- (id)customWindowsToEnterFullScreenForWindow:(id)arg1;
- (unsigned long long)window:(id)arg1 willUseFullScreenPresentationOptions:(unsigned long long)arg2;
- (struct CGSize)window:(id)arg1 willUseFullScreenContentSize:(struct CGSize)arg2;
- (BOOL)window:(id)arg1 shouldDragDocumentWithEvent:(id)arg2 from:(struct CGPoint)arg3 withPasteboard:(id)arg4;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (id)windowWillReturnUndoManager:(id)arg1;
- (BOOL)windowShouldZoom:(id)arg1 toFrame:(struct CGRect)arg2;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (id)windowWillReturnFieldEditor:(id)arg1 toObject:(id)arg2;
- (BOOL)windowShouldClose:(id)arg1;
@end

// Not exported
@interface GPUImageEditorOverlayFragmentShader : GPUImageEditorShader
{
}

- (id)initWithShaderId:(unsigned int)arg1;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorOverlayShaderProgram : NSObject
{
    GPUImageEditorVertexShader *_vertShader;
    GPUImageEditorOverlayFragmentShader *_fragShader;
    unsigned int _programId;
    unsigned int _locOverlayColor;
}

- (void)setOverlayColor:(float *)arg1;
- (void)use;
- (BOOL)_link;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithProgramId:(unsigned int)arg1 WithVertexShaderId:(unsigned int)arg2 WithFragmentShaderId:(unsigned int)arg3;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUAttachmentRenderJob : NSObject
{
    DYResourceObject *attachmentRO;
    DYFramebufferAttachment *attachment;
    GPUImageEditorDisplayAttributes *displayAttributes;
    BOOL showDepth;
    DYFuture *future;
    GPURenderBuffer *renderBuffer;
    unsigned int attachmentEnum;
}

@end

// Not exported
@interface GPUTraceEditor : IDEEditor <IDEDebuggingAddtionUIControllerLifeCycleObserver, GPUTraceResourceInfoDelegateProtocol, GPURenderBufferViewStateCoordinationProtocol>
{
    struct dispatch_queue_s *_queue;
    DVTBorderedView *_bottomToolBar;
    DVTSegmentedControl *_buffersSegmentedControl;
    NSSegmentedControl *_viewSegmentedControl;
    NSTextField *_viewSegmentLabel;
    NSSegmentedControl *_orientationSegmentedControl;
    GPURenderBufferCanvas *_renderBufferCanvas;
    NSMenuItem *_revealInDebugNavigatorMenuItem;
    GPURenderBuffer *_colorRenderBuffer;
    GPURenderBuffer *_depthRenderBuffer;
    GPURenderBuffer *_stencilRenderBuffer;
    BOOL _showColorBuffer;
    BOOL _showDepthBuffer;
    BOOL _showStencilBuffer;
    BOOL _showAllBuffer;
    GPUTraceDrawItem *_currentDrawItem;
    GPUImageEditorRenderer *_renderer;
    BOOL _navIdle;
    GPUTraceOutlineItem *_nextNavItem;
    NSMenuItem *toggleWireframeMenuItem;
    GPUDebuggingAdditionUIController *_debuggingAdditionUIController;
    GPUSharedTabUIState *_sharedUIStateObj;
    GPUTraceCurrentDrawBuffer *_currentDrawBuffer;
    id <DVTObservingToken> _debugBarSelectedModelItemToken;
    BOOL _ignoreDebugBarModelItemSelected;
    unsigned int _nextSliderIndex;
    BOOL _drawIdle;
    id <IDEOpenRequest> _sliderOpenRequestToken;
    int _currentRequestStepperDirection;
    BOOL _alreadyDrawn;
    GPUImageEditorDisplayAttributes *_displayAttrsColor;
    GPUImageEditorDisplayAttributes *_displayAttrsDepth;
    GPUImageEditorDisplayAttributes *_displayAttrsStencil;
    id _controlKeyEventTap;
    NSImage *_zoomToFitIcon;
    NSImage *_zoomToActualIcon;
    NSString *_zoomToFitControlLabel;
    NSString *_freeZoomControlLabelFormat;
    struct CGPoint _scrollPoint;
    double _zoom;
    _Bool _zoomToFit;
    _Bool _changingVisibleBuffers;
    double _scaleX;
    double _scaleY;
    int _rotation;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
@property GPUTraceCurrentDrawBuffer *currentDrawBuffer; // @synthesize currentDrawBuffer=_currentDrawBuffer;
@property(copy) NSMenuItem *toggleWireframeMenuItem; // @synthesize toggleWireframeMenuItem;
- (id).cxx_construct;
- (void)resourceUpdateToneMapRangeWithDisplayAttributes:(id)arg1;
- (void)resourceToggleAlphaEnable:(id)arg1;
- (void)resourceToggleBlueEnable:(id)arg1;
- (void)resourceToggleGreenEnable:(id)arg1;
- (void)resourceToggleRedEnable:(id)arg1;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)renderBufferViewDidChangeState:(id)arg1;
- (int)openGLAPI;
- (id)currentStateMirror;
- (void)updateMasterLocation:(id)arg1;
- (void)_openSubEditorLocation:(id)arg1;
- (void)updateDrawPosition:(id)arg1;
- (void)scrubToDrawIndex:(unsigned int)arg1;
- (void)selectDocumentLocations:(id)arg1;
- (void)updateNavigationWithNavItem:(id)arg1;
- (BOOL)_setCurrentNavItem:(id)arg1;
- (void)_updateScrubberForDrawItem:(id)arg1 isAssociatedDraw:(BOOL)arg2;
- (id)currentSelectedDocumentLocations;
- (id)currentSelectedItems;
- (void)debuggingAddtionUIControllerInvalidated:(id)arg1;
- (void)debuggingAddtionUIControllerUpdated:(id)arg1;
- (Class)classOfDebuggingAddtionUIControllerInterestedIn;
- (void)changeZoom:(id)arg1;
- (void)gpuZoomToFit:(id)arg1;
- (void)gpuZoomActual:(id)arg1;
- (void)gpuZoomOut:(id)arg1;
- (void)gpuZoomIn:(id)arg1;
- (void)_applyNewZoom:(double)arg1 operation:(int)arg2;
- (BOOL)_zoomToFitEnabled;
- (BOOL)_zoomActualEnabled;
- (BOOL)_zoomOutEnabled;
- (BOOL)_zoomInEnabled;
- (void)changeOrientation:(id)arg1;
- (void)gpuFlipHorz:(id)arg1;
- (void)gpuFlipVert:(id)arg1;
- (void)gpuRotateCW:(id)arg1;
- (void)gpuRotateCCW:(id)arg1;
- (void)_updateOrientation:(BOOL)arg1;
- (void)_changeVisibleBufferViews:(int)arg1;
- (void)changeVisibleBufferViews:(id)arg1;
- (void)_updateToolbarState;
- (void)_storePreferredVisibleRenderBuffers;
- (void)_updateRenderBuffersVisibility;
- (BOOL)_stencilBufferEnabled:(id)arg1;
- (BOOL)_depthBufferEnabled:(id)arg1;
- (BOOL)_colorBufferEnabled:(id)arg1;
- (BOOL)_autoBuffersEnabled:(id)arg1;
- (void)_updateRenderBuffersVisibilityAfterDelay;
- (id)_updateViewsWithDrawItem:(id)arg1;
- (id)_updateViewsWithStateItem:(id)arg1;
- (id)_updateRenderBuffersWithDrawItem:(id)arg1;
- (void)_renderFramebufferAttachments;
- (id)_renderedImage:(id)arg1 overlayImage:(id)arg2 withAttachment:(id)arg3 withDrawItem:(id)arg4 withDisplayAttributes:(id)arg5 withShowDepth:(BOOL)arg6;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)_initializeEditorControls;
- (void)gpuBuffersStencil:(id)arg1;
- (void)gpuBuffersDepth:(id)arg1;
- (void)gpuBuffersColor:(id)arg1;
- (void)gpuBuffersAuto:(id)arg1;
- (void)toggleWireframe:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)loadView;
- (void)_makeSegmentedControlImagesTemplates:(id)arg1;
- (void)finalize;

@end

// Not exported
@interface GPUTraceDocument : IDEEditorDocument <IDEDocumentStructureProviding>
{
    DYCaptureArchive *_captureArchive;
    GPUTraceOutline *_outline;
    GPUTraceReplayController *_replayController;
    GPUTraceSession *_traceSession;
    NSURL *_currentArchiveURL;
    GPUDebuggingAdditionUIController *_debuggingAdditionUIController;
}

@property(retain) GPUDebuggingAdditionUIController *debuggingAdditionUIController; // @synthesize debuggingAdditionUIController=_debuggingAdditionUIController;
@property(retain) GPUTraceSession *traceSession; // @synthesize traceSession=_traceSession;
@property(readonly) GPUTraceReplayController *replayController; // @synthesize replayController=_replayController;
@property(readonly) GPUTraceOutline *outline; // @synthesize outline=_outline;
@property(readonly) DYCaptureArchive *captureArchive; // @synthesize captureArchive=_captureArchive;
- (id)automaticSourceLocationForDocumentLocation:(id)arg1;
- (id)boundResourcesGeniusLocationsForDocumentLocation:(id)arg1;
- (id)allResourcesGeniusLocationsForDocumentLocation:(id)arg1;
@property(readonly) NSArray *ideTopLevelStructureObjects;
- (void)editorDocumentDidClose;
- (void)editorDocumentWillClose;
- (id)dataOfType:(id)arg1 error:(id *)arg2;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;

@end

// Not exported
@interface GPUTraceGeniusResultsFinder : IDEGeniusResultsFinder
{
}

+ (Class)editorDocumentClass;
- (void)findGeniusResultsForEditorDocument:(id)arg1 selectedDocumentLocations:(id)arg2;

@end

// Not exported
@interface GPUTraceResourcesDocument : IDEEditorDocument <IDEDocumentStructureProviding>
{
    GPUTraceOutline *_outline;
    NSString *_resourceGroup;
    GPUSharedTabUIState *_sharedUIStateObj;
    id <DVTObservingToken> _mainEditorLocationObserverToken;
    NSArray *_topLevelObjects;
}

+ (id)keyPathsForValuesAffectingNavigableItem_name;
@property(readonly) GPUTraceOutline *outline; // @synthesize outline=_outline;
@property(readonly) NSArray *ideTopLevelStructureObjects;
- (int)readOnlyStatus;
- (id)displayName;
- (void)editorDocumentWillClose;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (void)refreshTopLevelObjects;
- (id)_topLevelGroup:(id)arg1 subgroup:(id)arg2 ForItem:(id)arg3;

@end

// Not exported
@interface GPUResourceThumbnailBox : NSBox
{
    id delegate;
}

- (void)keyDown:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;

@end

// Not exported
@interface GPUTraceResourceCollectionViewItem : NSCollectionViewItem
{
    NSTextField *_label;
}

- (void)doubleClick:(id)arg1;
- (void)setSelected:(BOOL)arg1;
- (void)loadView;

@end

// Not exported
@interface GPUTraceResourcesEditor : IDEEditor <NSCollectionViewDelegate, IDEGPUAssistantEditorAdditions>
{
    NSArrayController *resourceArrayController;
    NSCollectionView *resourceCollectionView;
    NSMutableArray *_resources;
    GPUResourceEditor *_currentSubViewController;
    GPUTraceOutline *_gpuTraceOutline;
    GPUTraceDocumentLocation *_currentLocation;
    NSDictionary *_previousEditorState;
    BOOL _loadingEditor;
    GPUSharedTabUIState *_sharedTabState;
    GPUImageEditorDisplayAttributes *_colorBufDispAttrs;
    GPUImageEditorDisplayAttributes *_depthBufDispAttrs;
    GPUImageEditorDisplayAttributes *_stencilBufDispAttrs;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
@property(retain) NSMutableArray *resources; // @synthesize resources=_resources;
- (void)_takeStateDictionaryFromPreviousGPUAssistantEditor:(id)arg1;
- (BOOL)_shouldInstallGPUEditorWithPreviousStateDictionaryOrNil:(id)arg1;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (id)_currentAssistantDocumentLocations;
- (id)_getSubEditorItemFromPreviousEditorState;
- (void)doubleClick:(id)arg1;
- (void)_openSubEditorLocation:(id)arg1;
- (void)selectDocumentLocations:(id)arg1;
- (id)currentSelectedItems;
- (void)_setCurrentLocation:(id)arg1;
- (void)_loadResourceEditorForNavItem:(id)arg1;
- (void)didSetupEditor;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)invalidate;
- (void)loadView;
- (void)takeFocus;

@end

// Not exported
@interface GPUResourceThumbnailFactory : NSObject
{
    struct dispatch_queue_s *_queue;
    GPUImageEditorRenderer *_renderer;
}

+ (id)sharedThumbnailFactory;
- (id)thumbnailWithResourceItem:(id)arg1;
- (id)_realizeThumbnailWithResourceItem:(id)arg1;
- (id)_generateThumbnailForImage:(id)arg1;
- (void)finalize;
- (id)init;

@end

// Not exported
@interface GPUImageEditorDisplayAttributes : NSObject
{
    GPUImageEditorDisplayAttributes *_globalDisplayAttributes;
    float _xCenter;
    float _yCenter;
    float _scaleFactor;
    BOOL _xFlip;
    BOOL _yFlip;
    unsigned int _rotate;
    BOOL _redEnable;
    BOOL _greenEnable;
    BOOL _blueEnable;
    int _alphaEnable;
    BOOL _onlyLevel;
    BOOL _allLevels;
    int _currentLevel;
    BOOL _allFaces;
    unsigned int _currentFace;
    BOOL _toneMapEnable;
    BOOL _toneMapIsFromUser;
    float _toneMapSliderMin;
    float _toneMapSliderMax;
    float _toneMapExtentMin;
    float _toneMapExtentMax;
    DYResourceObject *_toneMapResource;
    BOOL _allSamples;
    unsigned int _currentSample;
    float _overlayRed;
    float _overlayGreen;
    float _overlayBlue;
    struct CGPoint _viewScrollPoint;
    double _viewZoomFactor;
    double _viewScaleX;
    double _viewScaleY;
    int _viewRotation;
    _Bool _viewZoomToFit;
}

+ (CDStruct_b2fbf00d)globalToneMapParamsForResource:(id)arg1 showDepth:(BOOL)arg2;
+ (id)toneMapParamsForResource:(id)arg1 showDepth:(BOOL)arg2;
+ (BOOL)resourceIsDepthOrStencil:(id)arg1;
@property _Bool viewZoomToFit; // @synthesize viewZoomToFit=_viewZoomToFit;
@property int viewRotation; // @synthesize viewRotation=_viewRotation;
@property double viewScaleY; // @synthesize viewScaleY=_viewScaleY;
@property double viewScaleX; // @synthesize viewScaleX=_viewScaleX;
@property double viewZoomFactor; // @synthesize viewZoomFactor=_viewZoomFactor;
@property struct CGPoint viewScrollPoint; // @synthesize viewScrollPoint=_viewScrollPoint;
@property float overlayBlue; // @synthesize overlayBlue=_overlayBlue;
@property float overlayGreen; // @synthesize overlayGreen=_overlayGreen;
@property float overlayRed; // @synthesize overlayRed=_overlayRed;
@property unsigned int currentSample; // @synthesize currentSample=_currentSample;
@property BOOL allSamples; // @synthesize allSamples=_allSamples;
@property float toneMapSliderMax; // @synthesize toneMapSliderMax=_toneMapSliderMax;
@property float toneMapSliderMin; // @synthesize toneMapSliderMin=_toneMapSliderMin;
@property float toneMapExtentMax; // @synthesize toneMapExtentMax=_toneMapExtentMax;
@property float toneMapExtentMin; // @synthesize toneMapExtentMin=_toneMapExtentMin;
@property BOOL toneMapIsFromUser; // @synthesize toneMapIsFromUser=_toneMapIsFromUser;
@property BOOL toneMapEnable; // @synthesize toneMapEnable=_toneMapEnable;
@property unsigned int currentFace; // @synthesize currentFace=_currentFace;
@property BOOL allFaces; // @synthesize allFaces=_allFaces;
@property int currentLevel; // @synthesize currentLevel=_currentLevel;
@property BOOL allLevels; // @synthesize allLevels=_allLevels;
@property BOOL onlyLevel; // @synthesize onlyLevel=_onlyLevel;
@property int alphaEnable; // @synthesize alphaEnable=_alphaEnable;
@property BOOL blueEnable; // @synthesize blueEnable=_blueEnable;
@property BOOL greenEnable; // @synthesize greenEnable=_greenEnable;
@property BOOL redEnable; // @synthesize redEnable=_redEnable;
@property unsigned int rotate; // @synthesize rotate=_rotate;
@property BOOL yFlip; // @synthesize yFlip=_yFlip;
@property BOOL xFlip; // @synthesize xFlip=_xFlip;
@property float scaleFactor; // @synthesize scaleFactor=_scaleFactor;
@property float yCenter; // @synthesize yCenter=_yCenter;
@property float xCenter; // @synthesize xCenter=_xCenter;
- (void)calculateToneMapParamsForResource:(id)arg1 showDepth:(BOOL)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithGlobalCopy:(id)arg1;
- (id)init;

@end

// Not exported
@interface GPUImageEditorImageObject : NSObject
{
    BOOL _isTextureImage;
    BOOL _isMultisample;
    BOOL _isShowDepth;
    unsigned int _numSamples;
    id _originalObject;
    int _width;
    int _height;
    unsigned int _format;
    unsigned int _type;
    NSData *_data;
    NSMutableArray *_datasMultisample;
    unsigned int _displayTextureInternalFormat;
    unsigned int _displayTextureFormat;
    unsigned int _displayTextureType;
    unsigned int _bytesPerPixel;
    unsigned int _rShift;
    unsigned int _rMask;
    unsigned int _gShift;
    unsigned int _gMask;
    unsigned int _bShift;
    unsigned int _bMask;
    unsigned int _aShift;
    unsigned int _aMask;
    float _redMin;
    float _redMax;
    float _greenMin;
    float _greenMax;
    float _blueMin;
    float _blueMax;
    float _alphaMin;
    float _alphaMax;
}

@property(readonly) float alphaMax; // @synthesize alphaMax=_alphaMax;
@property(readonly) float alphaMin; // @synthesize alphaMin=_alphaMin;
@property(readonly) float blueMax; // @synthesize blueMax=_blueMax;
@property(readonly) float blueMin; // @synthesize blueMin=_blueMin;
@property(readonly) float greenMax; // @synthesize greenMax=_greenMax;
@property(readonly) float greenMin; // @synthesize greenMin=_greenMin;
@property(readonly) float redMax; // @synthesize redMax=_redMax;
@property(readonly) float redMin; // @synthesize redMin=_redMin;
@property(readonly) unsigned int displayTextureType; // @synthesize displayTextureType=_displayTextureType;
@property(readonly) unsigned int displayTextureFormat; // @synthesize displayTextureFormat=_displayTextureFormat;
@property(readonly) unsigned int displayTextureInternalFormat; // @synthesize displayTextureInternalFormat=_displayTextureInternalFormat;
@property(readonly) NSArray *datasMultisample; // @synthesize datasMultisample=_datasMultisample;
@property(readonly) NSData *data; // @synthesize data=_data;
@property(readonly) unsigned int type; // @synthesize type=_type;
@property(readonly) unsigned int format; // @synthesize format=_format;
@property(readonly) int height; // @synthesize height=_height;
@property(readonly) int width; // @synthesize width=_width;
@property(readonly) id originalObject; // @synthesize originalObject=_originalObject;
@property(readonly) unsigned int numSamples; // @synthesize numSamples=_numSamples;
@property(readonly) BOOL isShowDepth; // @synthesize isShowDepth=_isShowDepth;
@property(readonly) BOOL isMultisample; // @synthesize isMultisample=_isMultisample;
@property(readonly) BOOL isTextureImage; // @synthesize isTextureImage=_isTextureImage;
- (void)_processMultisampleData:(BOOL)arg1;
- (void)_computeMinMaxBytesPerPixel1:(id)arg1;
- (void)_computeMinMaxBytesPerPixel2:(id)arg1;
- (void)_computeMinMaxBytesPerPixel3:(id)arg1;
- (void)_computeMinMaxBytesPerPixel4:(id)arg1;
- (void)_computeMinMaxBytesPerPixel8:(id)arg1;
- (void)_computeMinMaxBytesPerPixel12:(id)arg1;
- (void)_computeMinMaxBytesPerPixel16:(id)arg1;
- (id)_convertStencilFixed8InLowerToUnsignedByte:(id)arg1;
- (id)_convertDepthFixed24ToFloat:(id)arg1;
- (id)_convertDepthFixed32ToFloat:(id)arg1;
- (BOOL)_validateRenderbufferFormat:(BOOL)arg1;
- (BOOL)_validateTextureFormatAndType:(unsigned int)arg1 withShowDepth:(BOOL)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRenderbuffer:(id)arg1 withShowDepth:(BOOL)arg2;
- (id)initWithRenderbuffer:(id)arg1;
- (id)initWithTextureImage:(id)arg1 withPaletteFormat:(unsigned int)arg2 withShowDepth:(BOOL)arg3;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorPixelInfo : NSObject
{
    unsigned int i;
    unsigned int k;
    unsigned int format;
    unsigned int type;
    BOOL showDepth;
    union {
        float fvalues[4];
        unsigned char bvalues[4];
        unsigned int ivalue;
    } data;
}

- (id)toString;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorRenderer : NSObject
{
    DYResourceObject *_resourceObject;
    GPUImageEditorDisplayAttributes *_displayAttributes;
    GPUImageEditorDisplayAttributes *_prevDisplayAttributes;
    BOOL _showDepth;
    struct CGSize _outputSize;
    DYRenderbufferObject *_overlay;
    BOOL _textureIsRenderbuffer;
    unsigned int _renderbufferTextureFace;
    unsigned int _renderbufferTextureLevel;
    NSString *_resourceLabel;
    BOOL _stateful;
    NSOpenGLContext *_context;
    unsigned int _programId;
    unsigned int _vertexShaderId;
    unsigned int _fragmentShaderId;
    unsigned int _programIdOverlay;
    unsigned int _fragmentShaderIdOverlay;
    unsigned int _offscreenRenderbuffer;
    unsigned int _programIdBackground;
    unsigned int _fragmentShaderIdBackground;
    unsigned int _offscreenFramebuffer;
    unsigned int _offscreenRenderbufferSize[2];
    float _s0;
    float _t0;
    float _s1;
    float _t1;
    float _s2;
    float _t2;
    float _s3;
    float _t3;
    BOOL _resourceHasAlpha;
    BOOL _doBlending;
    BOOL _resourceAttributesAreKnown;
    unsigned int _resourceFormat;
    unsigned int _resourceType;
    unsigned int _resourceBytesPerPixel;
    unsigned int _firstLevelSpecified;
    unsigned int _firstImageWidth;
    unsigned int _firstImageHeight;
    unsigned int _textureBaseWidth;
    unsigned int _textureBaseHeight;
    unsigned int _displayTextureInternalFormat;
    unsigned int _displayTextureFormat;
    unsigned int _displayTextureType;
    BOOL _isTexture;
    BOOL _isMipmap;
    BOOL _isMultisample;
    unsigned int _numSamples;
    unsigned int _numLevels;
    BOOL _isCubemap;
    NSArray *_isCubemapArray;
    GPUImageEditorShaderProgram *_shaderProgram;
    GPUImageEditorOverlayShaderProgram *_shaderProgramOverlay;
    GPUImageEditorBackgroundShaderProgram *_shaderProgramBackground;
    struct dispatch_queue_s *_renderQueue;
    BOOL _toneMapEnabledValid;
    BOOL _toneMapEnabled;
    NSArray *_geometry;
    NSMutableArray *_renderbufferMultisampleAllPixelInfos;
    BOOL _overlayValid;
    BOOL _blendingValid;
    NSMutableArray *_imageObjects;
    unsigned int _numImageObjects;
    unsigned int _paletteTextureFormat;
    struct CGColorSpace *_cgImageColorSpace;
    unsigned int _inputAttrChanges;
    int _whichDisplayCase;
    BOOL _alphaEnabled;
    BOOL _unknownFormat;
    NSImage *_unknownFormatImage;
    float _vertexDataRectBuf[48];
    float _texCoordDataRectBuf[32];
    GPUImageEditorTexturePool *_texturePool;
    BOOL _isLuminance;
}

+ (void)depthTextureWriteToTiffFile:(id)arg1 withName:(id)arg2;
+ (void)renderbufferWriteToTiffFile:(id)arg1 withName:(id)arg2;
+ (void)rawRGBADataToTiffFile:(char *)arg1 withWidth:(int)arg2 withHeight:(int)arg3 withName:(id)arg4;
+ (id)rawRGBADataToNSImage:(char *)arg1 withWidth:(int)arg2 withHeight:(int)arg3;
+ (void)imageWriteToTiffFile:(id)arg1 withName:(id)arg2;
+ (struct CGSize)displayDimensionsFromItem:(id)arg1 forResource:(id)arg2 withDisplayAttributes:(id)arg3;
+ (struct CGSize)_displayDimensionsFromItem:(id)arg1 forTextureResource:(id)arg2 withDisplayAttributes:(id)arg3;
+ (id)_firstImageFrom:(id)arg1 WithMinimumLevel:(unsigned int)arg2;
+ (unsigned int)formatForResource:(id)arg1;
+ (void)_initializeBackgroundTextureImage;
+ (id)logAspect;
+ (void)initialize;
@property(retain) NSString *resourceLabel; // @synthesize resourceLabel=_resourceLabel;
@property unsigned int renderbufferTextureLevel; // @synthesize renderbufferTextureLevel=_renderbufferTextureLevel;
@property unsigned int renderbufferTextureFace; // @synthesize renderbufferTextureFace=_renderbufferTextureFace;
@property BOOL textureIsRenderbuffer; // @synthesize textureIsRenderbuffer=_textureIsRenderbuffer;
@property(retain) DYRenderbufferObject *overlay; // @synthesize overlay=_overlay;
@property struct CGSize outputSize; // @synthesize outputSize=_outputSize;
@property BOOL showDepth; // @synthesize showDepth=_showDepth;
@property(retain) GPUImageEditorDisplayAttributes *displayAttributes; // @synthesize displayAttributes=_displayAttributes;
@property(retain) DYResourceObject *resourceObject; // @synthesize resourceObject=_resourceObject;
- (void)_resolveMultisamplePixelInfosWithFormat:(unsigned int)arg1 pixelInfo:(id)arg2;
- (void)_getRenderbufferPixelAtI:(unsigned int)arg1 atK:(unsigned int)arg2 withFormat:(unsigned int)arg3 withWidth:(unsigned int)arg4 withData:(id)arg5 pixelInfo:(id)arg6;
- (BOOL)_selectPixelAtX:(float)arg1 atY:(float)arg2 pixelInfo:(id)arg3;
- (BOOL)selectPixelAtX:(float)arg1 atY:(float)arg2 pixelInfo:(id)arg3;
- (void)_loadToneMapUniforms;
- (void)_geometrySetLevelAndFace:(id)arg1 level:(unsigned int)arg2 face:(unsigned int)arg3;
- (void)_geometrySetFace:(id)arg1 face:(unsigned int)arg2;
- (void)_geometrySetLevel:(id)arg1 level:(unsigned int)arg2;
- (id)_layoutSingleImage:(struct CGRect)arg1;
- (id)_layoutAllCubemapFaces:(struct CGRect)arg1 withFaceSize:(unsigned int)arg2;
- (id)_layoutAllCubemapFaces:(struct CGRect)arg1;
- (id)_layoutAllMipmapLevels:(struct CGRect)arg1 withSingleImage:(BOOL)arg2;
- (id)_layoutAllMipmapLevels:(struct CGRect)arg1;
- (id)_layoutAllMipmapLevelsAndAllCubemapFaces:(struct CGRect)arg1;
- (id)_getImageForCurrentAttributes;
- (id)getImageWithResourceObject:(id)arg1 withDisplayAttributes:(id)arg2 withShowDepth:(BOOL)arg3 withOutputSize:(struct CGSize)arg4 withOverlay:(id)arg5 withRenderbufferTextureFace:(unsigned int)arg6 withRenderbufferTextureLevel:(unsigned int)arg7 withResourceLabel:(id)arg8;
- (id)getImageWithResourceObject:(id)arg1 withDisplayAttributes:(id)arg2 withShowDepth:(BOOL)arg3 withOutputSize:(struct CGSize)arg4 withOverlay:(id)arg5 withResourceLabel:(id)arg6;
- (id)getImageWithResourceObject:(id)arg1 withDisplayAttributes:(id)arg2 withShowDepth:(BOOL)arg3 withOutputSize:(struct CGSize)arg4 withResourceLabel:(id)arg5;
- (id)getImage;
- (char *)_renderAndReadDisplayGeometry;
- (void)_resizeGeometryElement:(id)arg1;
- (void)_calcTexCoords;
- (void)_loadBackgroundTexture;
- (id)_getImageObjectForLevel:(unsigned int)arg1 forFaceIndex:(unsigned int)arg2;
- (void)_setImageObject:(id)arg1 forLevel:(unsigned int)arg2 forFaceIndex:(unsigned int)arg3;
- (void)_initImageObjectsWithNumLevels:(unsigned int)arg1 withNumFaces:(unsigned int)arg2;
- (void)_loadImageIntoTexture:(id)arg1 target:(unsigned int)arg2 level:(int)arg3 dataPtr:(const char *)arg4 faceIdx:(int)arg5;
- (void)_loadFacesForLevel:(unsigned int)arg1 withImages:(id)arg2 withLevelWidth:(unsigned int)arg3 withLevelHeight:(unsigned int)arg4 withDisplayAttributes:(id)arg5;
- (void)_loadRenderbuffer:(id)arg1 withDisplayAttributes:(id)arg2;
- (void)_loadSingleImage:(id)arg1 withDisplayAttributes:(id)arg2;
- (void)_loadMipmapNonCubemap:(id)arg1 withDisplayAttributes:(id)arg2;
- (void)_loadMipmapCubemap:(id)arg1 withDisplayAttributes:(id)arg2;
- (void)_loadResourceIntoTexture:(id)arg1 withDisplayAttributes:(id)arg2;
- (BOOL)_initGL;
- (void)_validateOverlay;
- (void)_invalidateOverlay;
- (void)_validateBlending;
- (void)_invalidateBlending;
- (void)_validateShaders;
- (void)_invalidateShaders;
- (void)_validateToneMapEnabled;
- (void)_invalidateToneMapEnabled;
- (void)_setOverlay:(id)arg1;
- (void)_setOutputSize:(struct CGSize)arg1;
- (void)_setShowDepth:(BOOL)arg1;
- (void)_setDisplayAttributes:(id)arg1;
- (void)_determineResourceAttributes;
- (void)_setResourceObject:(id)arg1;
- (void)finalize;
- (void)invalidate;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUVAOEditor : GPUResourceEditor <GPUDataTableViewDataProvider, GPUDataTableViewDelegate>
{
    GPUDataTableView *_vaoView;
    struct GPUVertexAttributes _vertexAttributes;
    BOOL _indexedModeEnabled;
    NSArray *_colors;
    NSArray *_secondaryColors;
    NSMenuItem *_showIndexColumnMenuItem;
}

@property(retain) GPUDataTableView *vaoView; // @synthesize vaoView=_vaoView;
- (id).cxx_construct;
- (void).cxx_destruct;
@property BOOL indexedModeEnabled;
- (id)supportedResourceClasses;
- (id)displayAttributesWithProperties:(id)arg1;
- (void)beginEditor;
- (void)loadView;
- (void)toggleIndexColummn;
- (void)dataTableViewWillShowContextMenu:(id)arg1;
- (double)dataTableView:(id)arg1 minimumWidthForColumn:(long long)arg2 inGroup:(long long)arg3;
- (id)dataTableView:(id)arg1 colorForCellAtRow:(long long)arg2 column:(long long)arg3 inGroup:(long long)arg4;
- (id)dataTableView:(id)arg1 textForCellAtRow:(long long)arg2 column:(long long)arg3 inColumnGroup:(long long)arg4;
- (id)dataTableView:(id)arg1 titleForColumnGroup:(long long)arg2;
- (id)dataTableView:(id)arg1 titleForColumn:(long long)arg2 inGroup:(long long)arg3;
- (long long)dataTableView:(id)arg1 numberOfColumnsInGroup:(long long)arg2;
- (long long)numberOfColumnGroupsInTableView:(id)arg1;
- (long long)numberOfRowsInDataTableView:(id)arg1;

@end

// Not exported
@interface GPUVAODisplayAttributes : NSObject
{
}

@end

// Not exported
@interface GPUFBOEditor : GPUResourceEditor
{
}

- (id)displayAttributesWithProperties:(id)arg1;
- (void)beginEditor;
- (void)finalize;
- (void)loadView;
- (id)supportedResourceClasses;

@end

// Not exported
@interface GPUVBOEditor : GPUResourceEditor <GPUDataTableViewDataProvider, GPUDataTableViewDelegate>
{
    GPUDataTableView *_vboView;
    DVTBorderedView *_bottomToolBar;
    long long _numberOfColumns;
    NSString *_displayFormat;
    int _dataFormat;
    struct GPUVertexAttributeComponent _bufferData;
    double _minColumnWidth;
}

@property long long numberOfColumns; // @synthesize numberOfColumns=_numberOfColumns;
@property(retain) GPUDataTableView *vboView; // @synthesize vboView=_vboView;
- (id).cxx_construct;
- (void).cxx_destruct;
- (id)displayAttributesWithProperties:(id)arg1;
- (void)beginEditor;
- (void)loadView;
- (id)widthInColumns;
- (void)setWidthInColumns:(id)arg1;
@property(retain) NSString *displayFormat;
@property(readonly) int dataFormat; // @synthesize dataFormat=_dataFormat;
- (double)dataTableView:(id)arg1 minimumWidthForColumn:(long long)arg2 inGroup:(long long)arg3;
- (id)dataTableView:(id)arg1 textForCellAtRow:(long long)arg2 column:(long long)arg3 inColumnGroup:(long long)arg4;
- (long long)dataTableView:(id)arg1 numberOfColumnsInGroup:(long long)arg2;
- (long long)numberOfColumnGroupsInTableView:(id)arg1;
- (long long)numberOfRowsInDataTableView:(id)arg1;
- (id)supportedResourceClasses;

@end

// Not exported
@interface GPUProgramEditorItem : NSObject
{
    NSString *displayName;
    NSAttributedString *source;
}

@property(retain, nonatomic) NSAttributedString *source; // @synthesize source;
@property(retain, nonatomic) NSString *displayName; // @synthesize displayName;

@end

// Not exported
@interface GPUProgramEditor : GPUResourceEditor
{
    GPUSimpleSourceTextView *sourceView;
    GPUSimpleSourceTextView *logView;
    NSArrayController *_shaderArrayController;
    NSPopUpButton *sourceMenu;
    DVTBorderedView *bottomBar;
    NSTextField *sourceMenuLabel;
    NSAttributedString *infoLog;
    unsigned long long selectedView;
}

@property(retain, nonatomic) NSAttributedString *infoLog; // @synthesize infoLog;
@property(nonatomic) unsigned long long selectedView; // @synthesize selectedView;
- (id)displayAttributesWithProperties:(id)arg1;
- (void)beginEditor;
- (void)addLinkedShader:(id)arg1 type:(unsigned int)arg2 attachedShaders:(id)arg3;
- (id)createItemWithLinkedShader:(id)arg1 type:(unsigned int)arg2 attachedShaders:(id)arg3;
- (id)createItemWithProgram:(id)arg1 source:(id)arg2 type:(unsigned int)arg3;
- (id)createItemWithShader:(id)arg1 suffix:(id)arg2;
- (void)_unbindSourceControlsAndOptionallyDisplaySingleDisabledItem:(id)arg1;
- (void)loadView;
- (id)supportedResourceClasses;

@end

// Not exported
@interface GPUFBODisplayAttributes : NSObject
{
}

- (id)init;

@end

// Not exported
@interface GPUVBODisplayAttributes : NSObject
{
}

- (id)init;

@end

// Not exported
@interface GPUProgramDisplayAttributes : NSObject
{
}

- (id)init;

@end

// Not exported
@interface GPUResourceEditor : DVTViewController
{
    DYResourceObject *_resourceObject;
    id _displayAttributes;
}

+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
- (void)setRepresentedObject:(id)arg1;
- (void)beginEditor;
- (id)displayAttributesWithProperties:(id)arg1;
- (id)loadResource:(id)arg1;
- (void)unload;
- (id)supportedResourceClasses;

@end

// Not exported
@interface GPUImageEditorShader : NSObject
{
    unsigned int _shaderId;
    unsigned int _shaderType;
    NSMutableArray *_sourceStrings;
}

@property(readonly) unsigned int shaderType; // @synthesize shaderType=_shaderType;
@property(readonly) unsigned int shaderId; // @synthesize shaderId=_shaderId;
- (BOOL)compile;
- (void)addSourceString:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithShaderType:(unsigned int)arg1 withShaderId:(unsigned int)arg2;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorFragmentShader : GPUImageEditorShader
{
}

- (id)initWithShaderId:(unsigned int)arg1 WithMipmapEnable:(BOOL)arg2 withCubemapEnable:(BOOL)arg3 withToneMapEnabled:(BOOL)arg4 withSwizzleMode:(int)arg5 withResourceNumSamples:(unsigned int)arg6 withDisplayAttributes:(id)arg7;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorShaderProgram : NSObject
{
    GPUImageEditorVertexShader *_vertShader;
    GPUImageEditorFragmentShader *_fragShader;
    unsigned int _programId;
    BOOL _isMipmap;
    BOOL _isCubemap;
    int _locLod;
    int _locFaceCode;
    unsigned int _level;
    unsigned int _faceCode;
    BOOL _toneMapEnabled;
    int _locToneMapSrcMin;
    int _locToneMapScale;
    int _locToneMapDstMin;
}

@property(readonly) BOOL toneMapEnabled; // @synthesize toneMapEnabled=_toneMapEnabled;
@property unsigned int faceCode; // @synthesize faceCode=_faceCode;
@property unsigned int level; // @synthesize level=_level;
- (void)setToneMapUniformsWithSrcMin:(float *)arg1 withScale:(float *)arg2 withDestMin:(float *)arg3;
- (void)setFace:(unsigned int)arg1;
- (void)use;
- (BOOL)_link;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithProgramId:(unsigned int)arg1 WithVertexShaderId:(unsigned int)arg2 WithFragmentShaderId:(unsigned int)arg3 WithMipmapEnable:(BOOL)arg4 withCubemapEnable:(BOOL)arg5 withToneMapEnabled:(BOOL)arg6 withSwizzleMode:(int)arg7 withResourceNumSamples:(unsigned int)arg8 withDisplayAttributes:(id)arg9;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorVertexShader : GPUImageEditorShader
{
}

- (id)initWithShaderId:(unsigned int)arg1;
- (id)description;

@end

// Not exported
@interface GPUImageEditorGeometryElement : NSObject
{
    struct CGRect _rect;
    NSNumber *_levelNum;
    NSNumber *_faceNum;
}

@property struct CGRect rect; // @synthesize rect=_rect;
- (BOOL)pointIsInsideWithX:(float)arg1 withY:(float)arg2;
- (BOOL)hasFace;
@property unsigned int face; // @dynamic face;
- (BOOL)hasLevel;
@property unsigned int level; // @dynamic level;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithRect:(struct CGRect)arg1 withLevel:(unsigned int)arg2 withFace:(unsigned int)arg3;
- (id)initWithRect:(struct CGRect)arg1 withFace:(unsigned int)arg2;
- (id)initWithRect:(struct CGRect)arg1 withLevel:(unsigned int)arg2;
- (id)initWithRect:(struct CGRect)arg1;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUQueryEditor : GPUResourceEditor
{
    NSTextField *queryResultView;
}

- (id)displayAttributesWithProperties:(id)arg1;
- (void)beginEditor;
- (id)supportedResourceClasses;
- (void)dealloc;
- (id)init;

@end

// Not exported
@interface GPUQueryDisplayAttributes : NSObject
{
}

- (void)dealloc;
- (id)init;

@end

// Not exported
@interface GPURenderBuffer : NSViewController <GPUTraceBubbleOwner>
{
    id <GPUTraceResourceInfoDelegateProtocol> _infoDelegate;
    GPURenderBufferButton *_infoButton;
    GPURenderBufferButton *_settingsButton;
    NSString *_nameInitedWith;
    NSMenu *_contextMenuInitedWith;
    NSImage *_image;
    DYResourceObject *_resource;
    GPUTraceResourceInfoBubble *_infoBubble;
    GPUTraceResourceSettingsBubble *_settingsBubble;
    GPUTraceEditor *_gpuTraceEditor;
    GPUImageEditorDisplayAttributes *_dispAttr;
    BOOL _showDepth;
    BOOL _enableInfoBubblePopup;
    BOOL _enableSettingsBubblePopup;
}

@property(copy) NSImage *image; // @synthesize image=_image;
@property(retain) DYResourceObject *resource; // @synthesize resource=_resource;
- (void)settingsUpdateToneMapRange;
- (void)settingsToggleAlphaEnable;
- (void)settingsToggleBlueEnable;
- (void)settingsToggleGreenEnable;
- (void)settingsToggleRedEnable;
- (void)invalidate;
- (void)unloadView;
- (void)updateView;
- (void)settingsBubbleClosed;
- (void)reEnableSettingsBubble;
- (void)showSettings:(id)arg1;
- (void)infoBubbleClosed;
- (void)reEnableInfoBubble;
- (void)showInfo:(id)arg1;
@property(readonly) GPURenderBufferView *renderBufferView; // @dynamic renderBufferView;
@property(copy) NSString *name;
@property(readonly) double imageHeightWidthRatio;
@property(readonly) double imageWidthHeightRatio;
@property(readonly) struct CGSize imageSize;
- (struct CGSize)sizeForHeight:(double)arg1;
- (struct CGSize)sizeForWidth:(double)arg1;
- (void)loadView;
- (id)description;
- (id)initWithName:(id)arg1 contextMenu:(id)arg2 traceEditor:(id)arg3 infoDelegate:(id)arg4 withDisplayAttributes:(id)arg5 withShowDepth:(BOOL)arg6;

@end

// Not exported
@interface GPURenderBufferCanvas : DVTLayerHostingView
{
    int _layoutOrientation;
    struct CGRect _boundsForContent;
    NSMutableArray *_displayedRenderBuffers;
    NSMapTable *_renderBufferObsTokens;
    int layoutOrientation;
    double _widthPerBuffer;
    struct {
        unsigned int needsLayout:1;
        unsigned int animateLayout:1;
        unsigned int _reserved:6;
    } _flags;
}

- (id).cxx_construct;
@property(readonly) NSArray *renderBuffers; // @dynamic renderBuffers;
- (void)_layoutVerticallyUsingAnimation:(BOOL)arg1;
- (void)_layoutHorizontallyUsingAnimation:(BOOL)arg1;
- (void)_layoutUsingAnimation:(BOOL)arg1;
- (int)_getDynamicLayout;
- (unsigned long long)_calcUsedAreaForVerticalLayout;
- (unsigned long long)_calcUsedAreaForHorizontalLayout;
- (void)setRenderBuffersUsingAnimation:(id)arg1;
- (void)_unobserveRenderBuffer:(id)arg1;
- (void)_observeRenderBuffer:(id)arg1;
- (void)_frameUpdated;
- (void)setFrame:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewWillDraw;
- (void)_installSetFrameAnimation:(id)arg1;
- (BOOL)canBecomeKeyView;
- (BOOL)acceptsFirstResponder;
- (void)_traceEditorCanvasCommonInit;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

// Not exported
@interface GPUResourceBackgroundView : NSView
{
}

+ (id)standardResourceBackgroundGradient;
- (void)drawRect:(struct CGRect)arg1;

@end

// Not exported
@interface GPUSimpleGLSLSourceView : GPUSimpleSourceTextView
{
}

- (id)languageIdentifier;

@end

// Not exported
@interface GPUSimplePlainTextView : GPUSimpleSourceTextView
{
}

@end

// Not exported
@interface GPUSimpleSourceTextView : DVTSourceTextView
{
    DVTTextSidebarView *_sidebarView;
}

- (void)installSidebarViewIfNeeded;
- (id)languageIdentifier;
@property(readonly) DVTTextSidebarView *sidebarView;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 textContainer:(id)arg2;
- (void)_commonInit;

@end

// Not exported
@interface GPUImageEditorBackgroundFragmentShader : GPUImageEditorShader
{
}

- (id)initWithShaderId:(unsigned int)arg1;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorBackgroundShaderProgram : NSObject
{
    GPUImageEditorVertexShader *_vertShader;
    GPUImageEditorBackgroundFragmentShader *_fragShader;
    unsigned int _programId;
}

- (void)use;
- (BOOL)_link;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithProgramId:(unsigned int)arg1 WithVertexShaderId:(unsigned int)arg2 WithFragmentShaderId:(unsigned int)arg3;
- (id)init;
- (id)description;

@end

// Not exported
@interface GPUImageEditorTexturePool : NSObject
{
    NSNumber *_resourceTexture2DIdNum;
    NSMutableArray *_resourceTextureCubemapIds;
    NSNumber *_backgroundTextureIdNum;
    NSNumber *_overlayTextureIdNum;
    NSMutableArray *_multisampleResourceTextureIds;
}

- (void)invalidate;
- (void)freeMultisampleResourceTextureIds;
- (BOOL)multisampleResourceTextureIdsAreAllocated;
- (id)multisampleResourceTextureIds:(unsigned int)arg1;
- (void)freeOverlayTextureId;
- (BOOL)overlayTextureIdIsAllocated;
- (unsigned int)overlayTextureId;
- (void)freeBackgroundTextureId;
- (BOOL)backgroundTextureIdIsAllocated;
- (unsigned int)backgroundTextureId;
- (void)freeResourceTextureCubemapId;
- (BOOL)resourceTextureCubemapIdIsAllocated;
- (unsigned int)resourceTextureCubemapIdForFace:(unsigned int)arg1;
- (void)freeResourceTexture2DId;
- (BOOL)resourceTexture2DIdIsAllocated;
- (unsigned int)resourceTexture2DId;

@end

// Not exported
@interface GPUTraceResourceInfoBubble : DVTHUDPopUpContentViewController <NSWindowDelegate>
{
    NSView *_parentView;
    DVTHUDPopUpController *_popUpWindowController;
    id _popupWindowCloseToken;
    DYResourceObject *_resource;
    id <GPUTraceResourceInfoDelegateProtocol> _infoDelegate;
    id <GPUTraceBubbleOwner> _owner;
    BOOL _isVisible;
    unsigned long long _bubbleEdge;
}

@property(readonly) NSView *parentView; // @synthesize parentView=_parentView;
@property(readonly) DYResourceObject *resource; // @synthesize resource=_resource;
- (void)windowDidResignKey:(id)arg1;
- (void)close;
- (void)_cleanUpAfterClosingPopupWindow;
- (void)toggleVisibilityAtPoint:(struct CGPoint)arg1;
- (id)initWithResource:(id)arg1 parentView:(id)arg2 nibName:(id)arg3 owner:(id)arg4 infoDelegate:(id)arg5;

@end

// Not exported
@interface GPUTraceColorInfoBubble : GPUTraceResourceInfoBubble
{
    NSTextField *_nameLabel;
    NSTextField *_sizeLabel;
    NSTextField *_formatLabel;
    NSTextField *_numSamplesLabel;
    NSTextField *_numSamplesLabelLabel;
}

- (void)viewDidInstall;
- (id)initWithResource:(id)arg1 parentView:(id)arg2 owner:(id)arg3 infoDelegate:(id)arg4;

@end

// Not exported
@interface GPUTraceDepthStencilInfoBubble : GPUTraceResourceInfoBubble
{
    NSTextField *_nameLabel;
    NSTextField *_sizeLabel;
    NSTextField *_formatLabel;
    NSTextField *_numSamplesLabel;
    NSTextField *_numSamplesLabelLabel;
}

- (void)viewDidInstall;
- (id)initWithResource:(id)arg1 parentView:(id)arg2 owner:(id)arg3 infoDelegate:(id)arg4;

@end

// Not exported
@interface GPUTraceTextureInfoBubble : GPUTraceResourceInfoBubble
{
    int _api;
    int _textureID;
    NSDictionary *_dict1;
    NSTextField *_nameLabel;
    NSTextField *_sizeLabel;
    NSTextField *_formatLabel;
    NSTextField *_typeLabel;
    NSTextField *_typeLabelLabel;
    NSTextField *_minFilterLabel;
    NSTextField *_magFilterLabel;
    NSTextField *_mipFilterLabel;
    NSTextField *_wrapSLabel;
    NSTextField *_wrapTLabel;
    NSTextField *_maxAnisoLabel;
    NSTextField *_maxLevelLabel;
    NSTextField *_cropRectXyLabel;
    NSTextField *_cropRectWhLabel;
    NSTextField *_compareModeLabel;
    NSTextField *_compareFuncLabel;
}

- (void)viewDidInstall;
- (void)finalize;
- (id)initWithResource:(id)arg1 parentView:(id)arg2 owner:(id)arg3 infoDelegate:(id)arg4;

@end

// Not exported
@interface GPUAltColorGroup : NSBox
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

// Not exported
@interface GPUTraceResourceSettingsBubble : DVTHUDPopUpContentViewController <NSWindowDelegate, NSTextFieldDelegate>
{
    NSView *_parentView;
    DVTHUDPopUpController *_popUpWindowController;
    id _popupWindowCloseToken;
    DYResourceObject *_resource;
    GPUImageEditorDisplayAttributes *_dispAttr;
    BOOL _showDepth;
    BOOL _isLuminance;
    id <GPUTraceBubbleOwner> _owner;
    BOOL _isVisible;
    unsigned int _channelCount;
    unsigned int _alphaChannelIndex;
    BOOL _hasRed;
    BOOL _hasGreen;
    BOOL _hasBlue;
    BOOL _hasAlpha;
    NSButton *_redButton;
    NSButton *_grnButton;
    NSButton *_bluButton;
    NSButton *_alfButton;
    NSBox *_visibleRangeBox;
    NSSlider *_dummySlider;
    NSTextField *_rangeEditMin;
    NSTextField *_rangeEditMax;
    DYRangeSlider *_visibleRangeSlider;
}

+ (unsigned int)_resourceFormat:(id)arg1;
- (void)updateToneMapRangeFields:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)updateToneMapRange:(id)arg1;
- (void)_setupVisibleRangeSlider;
- (void)_setupChannelEnableControl;
- (void)viewDidInstall;
- (void)toggleChannelEnable:(id)arg1;
- (void)updateChannelEnableImages;
- (void)setButtonToolTipText:(id)arg1 withChannel:(id)arg2;
- (void)windowDidResignKey:(id)arg1;
- (void)close;
- (void)_cleanUpAfterClosingPopupWindow;
- (void)toggleVisibilityAtPoint:(struct CGPoint)arg1;
- (id)getAlphaButton;
- (id)initWithResource:(id)arg1 withDisplayAttributes:(id)arg2 withShowDepth:(BOOL)arg3 parentView:(id)arg4 owner:(id)arg5;
- (int)numChannelsSelectedInImage;

@end

// Not exported
@interface GPURenderBufferView : DVTLayerHostingView
{
    CAScrollLayer *_scrollLayer;
    CALayer *_imageLayer;
    CATextLayer *_titleLayer;
    _Bool _useFastShadows;
    NSImage *_image;
    struct CGSize _scaledImageSize;
    NSString *_title;
    struct CGPoint _scrollPoint;
    struct CGSize _scrollPadding;
    struct CGPoint _transactionScrollPoint;
    struct CGPoint _dragOrigin;
    struct CGSize _dragDelta;
    struct CGSize _dampenedDragDelta;
    struct dispatch_source_s *_snapbackTimer;
    double _zoomFactor;
    double _transactionZoomFactor;
    struct CGPoint _transactionZoomCenterPoint;
    double _zoomToFitFactor;
    double _zoomMomentumVelocity;
    double _zoomMomentumLastTimestamp;
    _Bool _ignoreScroll;
    _Bool _zoomToFit;
    _Bool _clampZoomToIntegers;
    _Bool _clampZoomToPowersOfTwo;
    double _savedZoomFactor;
    id _swipeHandler;
    struct CGAffineTransform _imageTransform;
    id <GPURenderBufferViewStateCoordinationProtocol> _coordinator;
    _Bool _setup;
    _Bool _gestureInProgress;
    _Bool _ignoreNextGestureEnd;
    _Bool _transaction;
    unsigned char _transactionState;
}

@property _Bool useFastShadows; // @synthesize useFastShadows=_useFastShadows;
@property(readonly) double zoomFactor; // @synthesize zoomFactor=_zoomFactor;
@property struct CGPoint scrollPoint; // @synthesize scrollPoint=_scrollPoint;
@property(copy) id swipeHandler; // @synthesize swipeHandler=_swipeHandler;
@property __weak id <GPURenderBufferViewStateCoordinationProtocol> coordinator; // @synthesize coordinator=_coordinator;
- (id).cxx_construct;
@property _Bool clampZoomToPowersOfTwo; // @dynamic clampZoomToPowersOfTwo;
@property _Bool clampZoomToIntegers; // @dynamic clampZoomToIntegers;
@property _Bool zoomToFit; // @dynamic zoomToFit;
@property(readonly) double minimumZoomFactor; // @dynamic minimumZoomFactor;
@property(readonly) double maximumZoomFactor; // @dynamic maximumZoomFactor;
@property(copy) NSString *title; // @dynamic title;
@property struct CGAffineTransform imageTransform; // @dynamic imageTransform;
@property(copy) NSImage *image; // @dynamic image;
- (BOOL)isOpaque;
- (void)dispatchInTransaction:(id)arg1;
- (void)setZoomFactor:(double)arg1 centerPoint:(struct CGPoint)arg2 roundToClosest:(_Bool)arg3;
- (void)synchronizeWithView:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)setupOrTearDown;
- (void)tearDown;
- (void)setup;
- (void)setupDragging;
- (void)teardownLayers;
- (void)setupLayers;
- (void)setLayer:(id)arg1;
- (id)makeBackingLayer;
- (void)_buildLayerTree:(id)arg1;
- (void)endGestureWithEvent:(id)arg1;
- (void)beginGestureWithEvent:(id)arg1;
- (void)swipeWithEvent:(id)arg1;
- (void)magnifyWithEvent:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (_Bool)_handleScrollEvent:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)_handleSmartZoomEvent:(id)arg1;
- (void)_handleZoomEvent:(id)arg1 factor:(double)arg2 centeredAt:(struct CGPoint)arg3 animate:(_Bool)arg4;
- (void)_handleDragEvent:(id)arg1 point:(struct CGPoint)arg2;
- (void)_cancelSnapbackAnimation;
- (BOOL)canBecomeKeyView;
- (BOOL)acceptsFirstResponder;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)layoutSublayersOfLayer:(id)arg1;
- (void)_updateImageLayerGeometry;
- (void)_updateScrollPadding;
- (void)_updateZoomToFitFactor;
- (void)_setScrollPoint:(struct CGPoint)arg1 broadcast:(_Bool)arg2;
- (double)_clampZoomFactor:(double)arg1;
- (struct CGPoint)_scrollPointForZoomFactor:(double)arg1 centeredAt:(struct CGPoint)arg2;
- (struct CGPoint)_effectiveScrollPoint;
- (struct CGSize)_transformedImageSize;
- (struct CGSize)_stretchAmountWithPoint:(struct CGPoint)arg1;
- (void)finalize;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;

@end

// Not exported
@interface GPUImageEditor : GPUResourceEditor <GPUTraceBubbleOwner, GPUTraceResourceInfoDelegateProtocol, GPURenderBufferViewStateCoordinationProtocol>
{
    struct dispatch_queue_s *_queue;
    GPURenderBufferView *_imageView;
    DVTBorderedView *_bottomToolBar;
    NSSegmentedControl *_viewSegmentedControl;
    NSSegmentedControl *_orientationSegmentedControl;
    NSTextField *_viewSegmentedControlLabel;
    GPURenderBufferButton *_infoButton;
    GPURenderBufferButton *_settingsButton;
    NSTextField *levelLabel;
    NSTextField *faceLabel;
    NSTextField *sampleLabel;
    NSPopUpButton *levelSelector;
    NSPopUpButton *faceSelector;
    NSPopUpButton *sampleSelector;
    BOOL _isRenderbuffer;
    GPUImageEditorRenderer *_renderer;
    GPUTraceResourceInfoBubble *_infoBubble;
    GPUTraceResourceSettingsBubble *_settingsBubble;
    BOOL _enableInfoBubblePopup;
    BOOL _enableSettingsBubblePopup;
    GPUImageEditorDisplayAttributes *_colorBufDispAttrs;
    GPUImageEditorDisplayAttributes *_depthBufDispAttrs;
    GPUImageEditorDisplayAttributes *_stencilBufDispAttrs;
    id _controlKeyEventTap;
    NSImage *_zoomToFitIcon;
    NSImage *_zoomToActualIcon;
    NSString *_zoomToFitControlLabel;
    NSString *_freeZoomControlLabelFormat;
    struct CGPoint _scrollPoint;
    double _zoom;
    _Bool _zoomToFit;
    double _scaleX;
    double _scaleY;
    int _rotation;
    GPUImageEditorDisplayAttributes *_onscreenDisplayAttributes;
}

- (id).cxx_construct;
- (void)settingsUpdateToneMapRange;
- (void)settingsToggleAlphaEnable;
- (void)settingsToggleBlueEnable;
- (void)settingsToggleGreenEnable;
- (void)settingsToggleRedEnable;
- (int)openGLAPI;
- (id)_gputraceOutline;
- (id)currentStateMirror;
- (void)settingsBubbleClosed;
- (void)reEnableSettingsBubble;
- (void)showSettings:(id)arg1;
- (void)infoBubbleClosed;
- (void)reEnableInfoBubble;
- (void)showInfo:(id)arg1;
- (void)renderBufferViewDidChangeState:(id)arg1;
- (void)changeZoom:(id)arg1;
- (void)gpuZoomToFit:(id)arg1;
- (void)gpuZoomActual:(id)arg1;
- (void)gpuZoomOut:(id)arg1;
- (void)gpuZoomIn:(id)arg1;
- (void)_applyNewZoom:(double)arg1 operation:(int)arg2;
- (BOOL)_zoomToFitEnabled;
- (BOOL)_zoomOutEnabled;
- (BOOL)_zoomInEnabled;
- (void)changeOrientation:(id)arg1;
- (void)gpuFlipHorz:(id)arg1;
- (void)gpuFlipVert:(id)arg1;
- (void)gpuRotateCW:(id)arg1;
- (void)gpuRotateCCW:(id)arg1;
- (void)_updateOrientation:(BOOL)arg1;
- (void)changeSample:(id)arg1;
- (void)changeFace:(id)arg1;
- (void)changeLevel:(id)arg1;
- (void)_updateToolbarState;
- (void)_updateSampleSelector;
- (void)_updateLevelSelector;
- (void)_updateImageView;
- (void)_updateUIForResourceAndAttributes;
- (BOOL)validateMenuItem:(id)arg1;
- (void)beginEditor;
- (void)unload;
- (void)loadView;
- (void)_makeSegmentedControlImagesTemplates:(id)arg1;
- (void)dealloc;
- (void)finalize;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2 colorBufDispAttrs:(id)arg3 depthBufDispAttrs:(id)arg4 stencilBufDispAttrs:(id)arg5;
- (id)supportedResourceClasses;

@end

// Not exported
@interface GPURenderBufferButton : NSControl
{
    NSTrackingArea *_ta;
    NSImage *_currentImage;
    NSTimer *_imageUpdateTimer;
    NSImage *_image;
    NSImage *_overImage;
    struct {
        unsigned int mouseInside:1;
        unsigned int mouseDown:1;
        unsigned int sentAction:1;
        unsigned int firstResponder:1;
        unsigned int _pad:5;
    } _state;
}

+ (Class)cellClass;
@property(retain) NSImage *overImage; // @synthesize overImage=_overImage;
@property(retain) NSImage *image; // @synthesize image=_image;
- (id).cxx_construct;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)updateTrackingAreas;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)_updateImage:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)_removeMousePressedFilter;
- (void)_applyMousePressedFilters;
- (BOOL)isOpaque;

@end

// Not exported
@interface GPURARToneMap : NSObject
{
    float min[4];
    float max[4];
}

@end

// Not exported
@interface GPUResourceEditorAssociativeReferences : NSObject
{
}

+ (id)toneMapMinMaxWithTextureObject:(id)arg1;
+ (id)toneMapMinMaxWithRenderbuffer:(id)arg1;
+ (id)toneMapMinMaxWithTextureImage:(id)arg1;
- (id)init;

@end

// Not exported
@interface _GPUDataTableHeaderViewCell : NSTableHeaderCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

// Not exported
@interface GPUDataTableView : NSTableView <NSTableViewDataSource, NSTableViewDelegate>
{
    struct {
        unsigned int hasSelectorForColumnGroupTitle:1;
        unsigned int hasSelectorForColumnTitle:1;
        unsigned int hasSelectorForCellColor:1;
        unsigned int hasSelectorForWillShowContextMenu:1;
        unsigned int hasSelectorForMinimumColumnWidth:1;
        unsigned int reserved:3;
    } _flags;
    long long *_columnGroupForColumn;
    long long *_columnIndexInGroup;
    long long _rowSelectionStart;
    long long _rowSelectionCurrent;
    long long _columnSelectionStart;
    long long _columnSelectionCurrent;
    NSMenu *_contextMenu;
    NSMenuItem *_copyMenuItem;
    id <GPUDataTableViewDataProvider> _dataProvider;
    id <GPUDataTableViewDelegate> _dataDelegate;
    NSFont *_cellFont;
    unsigned long long _cellTextAlignment;
    NSColor *_selectedCellColor;
    NSString *_noDataString;
}

@property(retain, nonatomic) NSString *noDataString; // @synthesize noDataString=_noDataString;
@property(retain, nonatomic) NSColor *selectedCellColor; // @synthesize selectedCellColor=_selectedCellColor;
@property(nonatomic) unsigned long long cellTextAlignment; // @synthesize cellTextAlignment=_cellTextAlignment;
@property(retain, nonatomic) NSFont *cellFont; // @synthesize cellFont=_cellFont;
@property(nonatomic) __weak id <GPUDataTableViewDelegate> dataDelegate; // @synthesize dataDelegate=_dataDelegate;
@property(nonatomic) __weak id <GPUDataTableViewDataProvider> dataProvider; // @synthesize dataProvider=_dataProvider;
- (double)widthOfCellWithString:(id)arg1;
- (void)drawBackgroundInClipRect:(struct CGRect)arg1;
- (BOOL)resignFirstResponder;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)reloadData;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (long long)indexOfTableColumn:(id)arg1;
- (id)tableColumnAtIndex:(long long)arg1;
- (void)setNumberOfColumns:(unsigned long long)arg1;
- (void)setNumberOfColumns:(unsigned long long)arg1 usingHeaderCell:(Class)arg2;
- (void)removeAllColumns;
- (long long)firstIndexOfTableColumnInGroup:(long long)arg1;
- (long long)tableColumnIndexForColumnInGroup:(long long)arg1 atIndex:(long long)arg2;
- (long long)indexInGroupOfTableColumnAtIndex:(long long)arg1;
- (long long)groupOfTableColumnAtIndex:(long long)arg1;
- (void)finalize;
- (void)dealloc;
- (void)viewDidMoveToSuperview;
- (void)commonInit;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)menuForEvent:(id)arg1;
- (void)addContextMenuItem:(id)arg1;
- (void)createContextMenu;
- (void)copy:(id)arg1;
- (void)selectAll:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)mouseDown:(id)arg1;
@property(readonly, nonatomic) long long selectionColumnEnd;
@property(readonly, nonatomic) long long selectionColumnStart;
@property(readonly, nonatomic) long long selectionRowEnd;
@property(readonly, nonatomic) long long selectionRowStart;
- (void)clearSelection;
- (BOOL)hasSelection;

@end

// Not exported
@interface _GPUDataTableHeaderView : NSTableHeaderView
{
    NSDictionary *_fontDrawingAttributes;
    NSColor *_topBackgroundColor;
    NSColor *_bottomBackgroundColor;
    NSColor *_borderColor;
    NSArray *_columnGroups;
}

@property(retain, nonatomic) NSArray *columnGroups; // @synthesize columnGroups=_columnGroups;
- (void)drawGroupedColumnWithTitle:(id)arg1 inRect:(struct CGRect)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawHeaderBackgroundInRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface GPUTraceResourceItem (GPUTraceResourceItemThumbnailFactoryIntegration)
- (id)thumbnail;
@end

